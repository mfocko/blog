"use strict";(self.webpackChunkfi=self.webpackChunkfi||[]).push([[2177],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),h=i,c=m["".concat(l,".").concat(h)]||m[h]||d[h]||o;return n?a.createElement(c,r(r({ref:t},u),{},{components:n})):a.createElement(c,r({ref:t},u))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8180:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const o={title:"4th week of Advent of Code '22 in Rust",description:"Surviving fourth week in Rust.",date:"2023-07-07T15:14",slug:"aoc-2022/4th-week",authors:"mf",tags:["advent-of-code","advent-of-code-2022","rust"],hide_table_of_contents:!1},r=void 0,s={permalink:"/blog/aoc-2022/4th-week",editUrl:"https://gitlab.com/mfocko/blog/tree/main/blog/aoc-2022/04-week-4.md",source:"@site/blog/aoc-2022/04-week-4.md",title:"4th week of Advent of Code '22 in Rust",description:"Surviving fourth week in Rust.",date:"2023-07-07T15:14:00.000Z",formattedDate:"July 7, 2023",tags:[{label:"advent-of-code",permalink:"/blog/tags/advent-of-code"},{label:"advent-of-code-2022",permalink:"/blog/tags/advent-of-code-2022"},{label:"rust",permalink:"/blog/tags/rust"}],readingTime:15.175,hasTruncateMarker:!0,authors:[{name:"Matej Focko",email:"me+blog@mfocko.xyz",title:"a.k.a. @mf",url:"https://gitlab.com/mfocko",imageURL:"https://github.com/mfocko.png",key:"mf"}],frontMatter:{title:"4th week of Advent of Code '22 in Rust",description:"Surviving fourth week in Rust.",date:"2023-07-07T15:14",slug:"aoc-2022/4th-week",authors:"mf",tags:["advent-of-code","advent-of-code-2022","rust"],hide_table_of_contents:!1},prevItem:{title:"How can Copr help with broken dependencies",permalink:"/blog/2023/08/02/copr"},nextItem:{title:"3rd week of Advent of Code '22 in Rust",permalink:"/blog/aoc-2022/3rd-week"}},l={authorsImageUrls:[void 0]},p=[{value:"Day 22: Monkey Map",id:"day-22-monkey-map",level:2},{value:"Solution",id:"solution",level:3},{value:"Column iterator",id:"column-iterator",level:4},{value:"Walking around the map",id:"walking-around-the-map",level:4},{value:"Problems",id:"problems",level:4},{value:"Clippy",id:"clippy",level:4},{value:"Day 23: Unstable Diffusion",id:"day-23-unstable-diffusion",level:2},{value:"Solution",id:"solution-1",level:3},{value:"Day 24: Blizzard Basin",id:"day-24-blizzard-basin",level:2},{value:"Solution",id:"solution-2",level:3},{value:"Breakdown",id:"breakdown",level:4},{value:"Evaluating the blizzards",id:"evaluating-the-blizzards",level:4},{value:"Shortest-path algorithm",id:"shortest-path-algorithm",level:4},{value:"Min-heap",id:"min-heap",level:4},{value:"Day 25: Full of Hot Air",id:"day-25-full-of-hot-air",level:2},{value:"Solution",id:"solution-3",level:3},{value:"Converting from <code>&amp;str</code>",id:"converting-from-str",level:4},{value:"Converting to <code>String</code>",id:"converting-to-string",level:4},{value:"Adjusting the code",id:"adjusting-the-code",level:4},{value:"Summary",id:"summary",level:2},{value:"Advent of Code",id:"advent-of-code",level:3},{value:"with Rust",id:"with-rust",level:3}],u={toc:p},m="wrapper";function d(e){let{components:t,...o}=e;return(0,i.kt)(m,(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Let's go through the fourth week of ",(0,i.kt)("a",{parentName:"p",href:"https://adventofcode.com"},(0,i.kt)("em",{parentName:"a"},"Advent of Code"))," in Rust."),(0,i.kt)("h2",{id:"day-22-monkey-map"},(0,i.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/22"},"Day 22: Monkey Map")),(0,i.kt)("admonition",{title:"tl;dr",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Simulating a movement on a 2D map with given instructions. Map becomes a cube in\nthe 2nd part\u2026")),(0,i.kt)("admonition",{title:"Rant",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"This was the most obnoxious problem of this year\u2026 and a lot of Rust issues have\nbeen hit.")),(0,i.kt)("h3",{id:"solution"},"Solution"),(0,i.kt)("p",null,"It seems like a very simple problem to solve, but with very obnoxious changes in\nthe 2nd part and also it's relatively hard to decompose \xbbproperly\xab."),(0,i.kt)("h4",{id:"column-iterator"},"Column iterator"),(0,i.kt)("p",null,"In the first part of the problem it was needed to know the boundaries of each\nrow and column, since I stored them in ",(0,i.kt)("inlineCode",{parentName:"p"},"Vec<Vec<char>>")," and padded with spaces\nto ensure I have a rectangular 2D \u201carray\u201d. However when you wanted to go through\neach row and column to determine the boundaries, it was very easy to do for the\nrows (cause each row is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Vec")," element), but not for the columns, since they\nspan multiple rows."),(0,i.kt)("p",null,"For this use case I have implemented my own ",(0,i.kt)("em",{parentName:"p"},"column iterator"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct ColumnIterator<'a, T> {\n    map: &'a [Vec<T>],\n    column: usize,\n\n    i: usize,\n}\n\nimpl<'a, T> ColumnIterator<'a, T> {\n    pub fn new(map: &'a [Vec<T>], column: usize) -> ColumnIterator<'a, T> {\n        Self { map, column, i: 0 }\n    }\n}\n\nimpl<'a, T> Iterator for ColumnIterator<'a, T> {\n    type Item = &'a T;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        if self.i >= self.map.len() {\n            return None;\n        }\n\n        self.i += 1;\n        Some(&self.map[self.i - 1][self.column])\n    }\n}\n")),(0,i.kt)("p",null,"Given this piece of an iterator, it is very easy to factor out the common\nfunctionality between the rows and columns into:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let mut find_boundaries = |constructor: fn(usize) -> Orientation,\n                           iterator: &mut dyn Iterator<Item = &char>,\n                           upper_bound,\n                           i| {\n    let mut first_non_empty = iterator.enumerate().skip_while(|&(_, &c)| c == ' ');\n    let start = first_non_empty.next().unwrap().0 as isize;\n\n    let mut last_non_empty = first_non_empty.skip_while(|&(_, &c)| c != ' ');\n    let end = last_non_empty.next().unwrap_or((upper_bound, &'_')).0 as isize;\n\n    boundaries.insert(constructor(i), start..end);\n};\n")),(0,i.kt)("p",null,"And then use it as such:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"// construct all horizontal boundaries\n(0..map.len()).for_each(|row| {\n    find_boundaries(\n        Orientation::horizontal,\n        &mut map[row].iter(),\n        map[row].len(),\n        row,\n    );\n});\n\n// construct all vertical boundaries\n(0..map[0].len()).for_each(|col| {\n    find_boundaries(\n        Orientation::vertical,\n        &mut ColumnIterator::new(&map, col),\n        map.len(),\n        col,\n    );\n});\n")),(0,i.kt)("h4",{id:"walking-around-the-map"},"Walking around the map"),(0,i.kt)("p",null,"Once the 2nd part got introduced, you start to think about a way how not to\ncopy-paste a lot of stuff (I haven't avoided it anyways\u2026). In this problem, I've\nchosen to introduce a trait (i.e. ",(0,i.kt)("em",{parentName:"p"},"interface"),") for 2D and 3D walker."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"trait Wrap: Clone {\n    type State;\n\n    // simulation\n    fn is_blocked(&self) -> bool;\n    fn step(&mut self, steps: isize);\n    fn turn_left(&mut self);\n    fn turn_right(&mut self);\n\n    // movement\n    fn next(&self) -> (Self::State, Direction);\n\n    // final answer\n    fn answer(&self) -> Output;\n}\n")),(0,i.kt)("p",null,"Each walker maintains its own state and also provides the functions that are\nused during the simulation. The \u201cpromised\u201d methods are separated into:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"simulation"),"-related: that are used during the simulation from the ",(0,i.kt)("inlineCode",{parentName:"li"},".fold()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"movement"),"-related: just a one method that holds most of the logic differences\nbetween 2D and 3D"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"final answer"),": which extracts the ",(0,i.kt)("em",{parentName:"li"},"proof of solution")," from the\nimplementation-specific walker")),(0,i.kt)("p",null,"Both 2D and 3D versions borrow the original input and therefore you must\nannotate the lifetime of it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"struct Wrap2D<'a> {\n    input: &'a Input,\n    position: Position,\n    direction: Direction,\n}\nimpl<'a> Wrap2D<'a> {\n    fn new(input: &'a Input) -> Wrap2D<'a> {\n// \u2026\n")),(0,i.kt)("h4",{id:"problems"},"Problems"),(0,i.kt)("p",null,"I have used a lot of closures for this problem and once I introduced a parameter\nthat was of unknown type (apart from the fact it implements a specific trait), I\ngot suggested a \u201cfix\u201d for the compilation error that resulted in something that\nwas not possible to parse, cause it, more than likely, violated the grammar."),(0,i.kt)("p",null,"In a similar fashion, I have been suggested changes that led to a code that\ndidn't make sense by just looking at it (there was no need to try the changes),\nfor example one suggested change in the closure parameter caused disapperance of\nthe parameter name. \ud83d\ude04"),(0,i.kt)("h4",{id:"clippy"},"Clippy"),(0,i.kt)("p",null,"I have to admit that Clippy was rather helpful here, I'll include two examples\nof rather smart suggestions."),(0,i.kt)("p",null,"When writing the parsing for this problem, the first thing I have spotted on the\n",(0,i.kt)("inlineCode",{parentName:"p"},"char")," was the ",(0,i.kt)("inlineCode",{parentName:"p"},".is_digit()")," function that takes a radix as a parameter. Clippy\nnoticed that I use ",(0,i.kt)("inlineCode",{parentName:"p"},"radix = 10")," and suggested switching to ",(0,i.kt)("inlineCode",{parentName:"p"},".is_ascii_digit()"),"\nthat does exactly the same thing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"-                .take_while(|c| c.is_digit(10))\n+                .take_while(|c| c.is_ascii_digit())\n")),(0,i.kt)("p",null,"Another useful suggestion appeared when working with the iterators and I wanted\nto get the ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"n")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"))))),"-th element from it. You know the ",(0,i.kt)("inlineCode",{parentName:"p"},".skip()"),", you know the\n",(0,i.kt)("inlineCode",{parentName:"p"},".next()"),", just \u201cslap\u201d them together and we're done for \ud83d\ude01 Well, I got\nsuggested to use ",(0,i.kt)("inlineCode",{parentName:"p"},".nth()")," that does exactly the combination of the two mentioned\nmethods on iterators:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"-            match it.clone().skip(skip).next().unwrap() {\n+            match it.clone().nth(skip).unwrap() {\n")),(0,i.kt)("h2",{id:"day-23-unstable-diffusion"},(0,i.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/23"},"Day 23: Unstable Diffusion")),(0,i.kt)("admonition",{title:"tl;dr",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Simulating movement of elves around with a set of specific rules.")),(0,i.kt)("h3",{id:"solution-1"},"Solution"),(0,i.kt)("p",null,"There's not much to mention since it's just a cellular automaton simulation\n(even though the AoC rules for cellular automatons usually get out of hand\n\ud83d\ude09)."),(0,i.kt)("p",null,"Although I had a need to determine boundaries of the elves' positions and ended\nup with a nasty DRY violation. Knowing that you you're looking for maximum and\nminimum that are, of course, exactly the same except for initial values and\ncomparators, it looks like a rather simple fix, but typing in Rust is something\nelse, right? In the end I settled for a function that computes both boundaries\nwithout any duplication while using a closure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"fn get_bounds(positions: &Input) -> (Vector2D<isize>, Vector2D<isize>) {\n    let f = |init, cmp: &dyn Fn(isize, isize) -> isize| {\n        positions\n            .iter()\n            .fold(Vector2D::new(init, init), |acc, elf| {\n                Vector2D::new(cmp(acc.x(), elf.x()), cmp(acc.y(), elf.y()))\n            })\n    };\n\n    (f(isize::MAX, &min::<isize>), f(isize::MIN, &max::<isize>))\n}\n")),(0,i.kt)("p",null,"This function returns a pair of 2D vectors that represent opposite points of the\nbounding rectangle of all elves."),(0,i.kt)("p",null,"You might ask why would we need a closure and the answer is that ",(0,i.kt)("inlineCode",{parentName:"p"},"positions"),"\ncannot be captured from within the nested function, only via closure. One more\nfun fact on top of that is the type of the comparator"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"&dyn Fn(isize, isize) -> isize\n")),(0,i.kt)("p",null,"Once we remove the ",(0,i.kt)("inlineCode",{parentName:"p"},"dyn")," keyword, compiler yells at us and also includes a way\nhow to get a more thorough explanation of the error by running"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ rustc --explain E0782\n")),(0,i.kt)("p",null,"which shows us"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Trait objects must include the `dyn` keyword.\n\nErroneous code example:\n\n```\ntrait Foo {}\nfn test(arg: Box<Foo>) {} // error!\n```\n\nTrait objects are a way to call methods on types that are not known until\nruntime but conform to some trait.\n\nTrait objects should be formed with `Box<dyn Foo>`, but in the code above\n`dyn` is left off.\n\nThis makes it harder to see that `arg` is a trait object and not a\nsimply a heap allocated type called `Foo`.\n\nTo fix this issue, add `dyn` before the trait name.\n\n```\ntrait Foo {}\nfn test(arg: Box<dyn Foo>) {} // ok!\n```\n\nThis used to be allowed before edition 2021, but is now an error.\n")),(0,i.kt)("admonition",{title:"Rant",type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"Not all of the explanations are helpful though, in some cases they might be even\nmore confusing than helpful, since they address ",(0,i.kt)("em",{parentName:"p"},"very simple")," use cases."),(0,i.kt)("p",{parentName:"admonition"},"As you can see, even in this case there are two sides to the explanations:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"it explains why you need to use ",(0,i.kt)("inlineCode",{parentName:"li"},"dyn"),", but"),(0,i.kt)("li",{parentName:"ul"},"it still mentions that trait objects need to be heap-allocated via ",(0,i.kt)("inlineCode",{parentName:"li"},"Box<T>"),"\nthat, as you can see in my snippet, ",(0,i.kt)("strong",{parentName:"li"},"does not")," apply here \ud83d\ude04 IMO it's\ncaused by the fact that we are borrowing it and therefore we don't need to\ncare about the size or whereabouts of it."))),(0,i.kt)("admonition",{title:"C++ parallel",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If you dive into the explanation above, you can notice that the ",(0,i.kt)("inlineCode",{parentName:"p"},"Box<dyn Trait>"),"\npattern is very helpful for using types that are not known during compile-time.\nYou would use a very similar approach in C++ when parsing some data structure\nfrom input (let's say JSON for example)."),(0,i.kt)("p",{parentName:"admonition"},"On the other hand, in this case, it doesn't really make much sense, cause you\ncan clearly see that the types ",(0,i.kt)("strong",{parentName:"p"},"are known")," during the compile-time, which in\nC++ could be easily resolved by templating the helper function.")),(0,i.kt)("h2",{id:"day-24-blizzard-basin"},(0,i.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/24"},"Day 24: Blizzard Basin")),(0,i.kt)("admonition",{title:"tl;dr",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Navigating your way through a basin with series of blizzards that move around\nyou as you move.")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"It's second to last day and I went \u201c",(0,i.kt)("em",{parentName:"p"},"bonkers"),"\u201d on the Rust \ud83d\ude04 Proceed to\nread ",(0,i.kt)("em",{parentName:"p"},"Solution")," part on your own risk.")),(0,i.kt)("h3",{id:"solution-2"},"Solution"),(0,i.kt)("p",null,"You are given a map with blizzards all over the place and you're supposed to\nfind the minimum time it requires you to walk through the basin without getting\nin any of the blizzards."),(0,i.kt)("h4",{id:"breakdown"},"Breakdown"),(0,i.kt)("p",null,"Relatively simple, yet a bit annoying, approach can be taken. It's technically\na shortest-path algorithm implementation with some relaxation restrictions and\nbeing able to stay on one position for some time, so each ",(0,i.kt)("em",{parentName:"p"},"vertex")," of the graph\nis determined by the position on the map and the ",(0,i.kt)("em",{parentName:"p"},"timestamp"),". I have chosen to\nuse ",(0,i.kt)("inlineCode",{parentName:"p"},"Vector3D<usize>"),", since ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," attributes can be used for the position\nand, well, let's use ",(0,i.kt)("inlineCode",{parentName:"p"},"z")," for a timestamp, cause why not, right? \ud83d\ude09"),(0,i.kt)("h4",{id:"evaluating-the-blizzards"},"Evaluating the blizzards"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"I think that this is the most perverted abuse of the traits in the whole 4 weeks\nof AoC in Rust\u2026")),(0,i.kt)("p",null,"The blizzards move along their respective directions in time and loop around in\ntheir respective row/column. Each vertex holds position ",(0,i.kt)("strong",{parentName:"p"},"and")," time, so we can\n",(0,i.kt)("em",{parentName:"p"},"just")," index the basin with the vertex itself, right? Yes, we can \ud83d\ude08"),(0,i.kt)("admonition",{title:"Fun fact",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"While writing this part, I've recognized unnecessary verbosity in the code and\ncleaned it up a bit. The changed version is shown here and the original was just\nmore verbose.")),(0,i.kt)("p",null,"I'll skip the boring parts of checking bounds and entry/exit of the basin \ud83d\ude09\nWe can easily calculate positions of the blizzards using a modular arithmetics:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"impl Index<Position> for Basin {\n    type Output = char;\n\n    fn index(&self, index: Position) -> &Self::Output {\n        // \u2039skipped boring parts\u203a\n\n        // We need to account for the loops of the blizzards\n        let width = self.cols - 2;\n        let height = self.rows - 2;\n\n        let blizzard_origin = |size, d, t, i| ((i - 1 + size + d * (t % size)) % size + 1) as usize;\n        [\n            (\n                index.y() as usize,\n                blizzard_origin(width, -1, index.z(), index.x()),\n                '>',\n            ),\n            (\n                index.y() as usize,\n                blizzard_origin(width, 1, index.z(), index.x()),\n                '<',\n            ),\n            (\n                blizzard_origin(height, -1, index.z(), index.y()),\n                index.x() as usize,\n                'v',\n            ),\n            (\n                blizzard_origin(height, 1, index.z(), index.y()),\n                index.x() as usize,\n                '^',\n            ),\n        ]\n        .iter()\n        .find_map(|&(y, x, direction)| {\n            if self.map[y][x] == direction {\n                Some(&self.map[y][x])\n            } else {\n                None\n            }\n        })\n        .unwrap_or(&'.')\n    }\n}\n")),(0,i.kt)("p",null,"As you can see, there is an expression for calculating the original position and\nit's used multiple times, so why not take it out to a lambda, right? \ud83d\ude09"),(0,i.kt)("p",null,"I couldn't get the ",(0,i.kt)("inlineCode",{parentName:"p"},"rustfmt")," to format the ",(0,i.kt)("inlineCode",{parentName:"p"},"for"),"-loop nicely, so I've just\ndecided to go with iterating over an elements of a slice. I have used, once\nagain, a combination of two functions (",(0,i.kt)("inlineCode",{parentName:"p"},"find_map")," in this case) to do 2 things\nat once and at the end, if we haven't found any blizzard, we just return the\nempty space."),(0,i.kt)("p",null,"I think it's a very ",(0,i.kt)("em",{parentName:"p"},"nice")," (and naughty) way how to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Index")," trait, don't\nyou think?"),(0,i.kt)("h4",{id:"shortest-path-algorithm"},"Shortest-path algorithm"),(0,i.kt)("p",null,"For the shortest path you can choose and adjust any of the common shortest-path\nalgorithms, in my case, I have decided to use ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/A*_search_algorithm"},(0,i.kt)("em",{parentName:"a"},"A","*"))," instead of Dijkstra's\nalgorithm, since it better reflects the ",(0,i.kt)("em",{parentName:"p"},"cost")," function."),(0,i.kt)("admonition",{title:"Comparison of costs",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"With the Dijkstra's algorithm I would proceed with the ",(0,i.kt)("inlineCode",{parentName:"p"},"time")," attribute used as\na priority for the queue."),(0,i.kt)("p",{parentName:"admonition"},"Whereas with the ",(0,i.kt)("em",{parentName:"p"},"A","*"),", I have chosen to use both time and Manhattan distance\nthat promotes vertices closer to the exit ",(0,i.kt)("strong",{parentName:"p"},"and")," with a minimum time taken.")),(0,i.kt)("p",null,"Cost function is, of course, a closure \ud83d\ude09"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let cost = |p: Position| p.z() as usize + exit.y().abs_diff(p.y()) + exit.x().abs_diff(p.x());\n")),(0,i.kt)("p",null,"And also for checking the possible moves from the current vertex, I have\nimplemented, yet another, closure that yields an iterator with the next moves:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let next_positions = |p| {\n    [(0, 0, 1), (0, -1, 1), (0, 1, 1), (-1, 0, 1), (1, 0, 1)]\n        .iter()\n        .filter_map(move |&(x, y, t)| {\n            let next_p = p + Vector3D::new(x, y, t);\n\n            if basin[next_p] == '.' {\n                Some(next_p)\n            } else {\n                None\n            }\n        })\n};\n")),(0,i.kt)("h4",{id:"min-heap"},"Min-heap"),(0,i.kt)("p",null,"In this case I had a need to use the priority queue taking the elements with the\nlowest cost as the prioritized ones. Rust only offers you the ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html"},(0,i.kt)("inlineCode",{parentName:"a"},"BinaryHeap"))," and\nthat is a max-heap. One of the ways how to achieve a min-heap is to put the\nelements in wrapped in a ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/cmp/struct.Reverse.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Reverse"))," (as is even showed in the linked ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html#min-heap"},"docs of\nthe ",(0,i.kt)("inlineCode",{parentName:"a"},"BinaryHeap")),"). However the wrapping affects the type of the heap and also\npopping the most prioritized elements yields values wrapped in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Reverse"),"."),(0,i.kt)("p",null,"For this purpose I have just taken the max-heap and wrapped it as a whole in a\nseparate structure providing just the desired methods:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"use std::cmp::{Ord, Reverse};\nuse std::collections::BinaryHeap;\n\npub struct MinHeap<T> {\n    heap: BinaryHeap<Reverse<T>>,\n}\n\nimpl<T: Ord> MinHeap<T> {\n    pub fn new() -> MinHeap<T> {\n        MinHeap {\n            heap: BinaryHeap::new(),\n        }\n    }\n\n    pub fn push(&mut self, item: T) {\n        self.heap.push(Reverse(item))\n    }\n\n    pub fn pop(&mut self) -> Option<T> {\n        self.heap.pop().map(|Reverse(x)| x)\n    }\n}\n\nimpl<T: Ord> Default for MinHeap<T> {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n")),(0,i.kt)("p",null,"Rest is just the algorithm implementation which is not that interesting."),(0,i.kt)("h2",{id:"day-25-full-of-hot-air"},(0,i.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/25"},"Day 25: Full of Hot Air")),(0,i.kt)("admonition",{title:"tl;dr",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Playing around with a numbers in a ",(0,i.kt)("em",{parentName:"p"},"special")," base.")),(0,i.kt)("p",null,"Getting flashbacks to the ",(0,i.kt)("em",{parentName:"p"},"IB111 Foundations of Programming"),"\u2026 Very nice \u201cproblem\u201d\nwith a rather easy solution, as the last day always seems to be."),(0,i.kt)("h3",{id:"solution-3"},"Solution"),(0,i.kt)("p",null,"Implementing 2 functions, converting from the ",(0,i.kt)("em",{parentName:"p"},"SNAFU base")," and back to the ",(0,i.kt)("em",{parentName:"p"},"SNAFU"),"\n",(0,i.kt)("em",{parentName:"p"},"base")," representation. Let's do a bit more though! I have implemented two functions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"from_snafu")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"to_snafu"))),(0,i.kt)("p",null,"Now it is apparent that all I do is number to string and string to number. Hmm\u2026\nthat sounds familiar, doesn't it? Let's introduce a structure for the SNAFU numbers\nand implement the traits that we need."),(0,i.kt)("p",null,"Let's start with a structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, PartialEq, Eq, PartialOrd, Ord)]\nstruct SNAFU {\n    value: i64,\n}\n")),(0,i.kt)("h4",{id:"converting-from-str"},"Converting from ",(0,i.kt)("inlineCode",{parentName:"h4"},"&str")),(0,i.kt)("p",null,"We will start by implementing the ",(0,i.kt)("inlineCode",{parentName:"p"},"FromStr")," trait that will help us parse our input.\nThis is rather simple, I can just take the ",(0,i.kt)("inlineCode",{parentName:"p"},"from_snafu")," function, copy-paste it\ninto the ",(0,i.kt)("inlineCode",{parentName:"p"},"from_str")," method and the number I get will be wrapped in ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"SNAFU")," structure."),(0,i.kt)("h4",{id:"converting-to-string"},"Converting to ",(0,i.kt)("inlineCode",{parentName:"h4"},"String")),(0,i.kt)("p",null,"This is more fun. In some cases you need to implement only one trait and others\nare automatically implemented using that one trait. In our case, if you look in\nthe documentation, you can see that ",(0,i.kt)("inlineCode",{parentName:"p"},"ToString")," trait is automatically implemented\nfor any type that implements ",(0,i.kt)("inlineCode",{parentName:"p"},"Display")," trait."),(0,i.kt)("p",null,"Let's implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"Display")," trait then. We should be able to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"to_snafu"),"\nfunction and just take the ",(0,i.kt)("inlineCode",{parentName:"p"},"self.value")," from the ",(0,i.kt)("inlineCode",{parentName:"p"},"SNAFU")," structure."),(0,i.kt)("p",null,"And for the convenience of tests, we can also implement a rather simple ",(0,i.kt)("inlineCode",{parentName:"p"},"From<i64>"),"\ntrait for the ",(0,i.kt)("inlineCode",{parentName:"p"},"SNAFU"),"."),(0,i.kt)("h4",{id:"adjusting-the-code"},"Adjusting the code"),(0,i.kt)("p",null,"After those changes we need to adjust the code and tests."),(0,i.kt)("p",null,"Parsing of the input is very easy, before we have used the lines, now we parse\neverything:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"     fn parse_input<P: AsRef<Path>>(pathname: P) -> Input {\n-        file_to_lines(pathname)\n+        file_to_structs(pathname)\n     }\n")),(0,i.kt)("p",null,"Part 1 needs to be adjusted a bit too:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"     fn part_1(input: &Input) -> Output {\n-        to_snafu(input.iter().map(|s| from_snafu(s)).sum())\n+        SNAFU::from(input.iter().map(|s| s.value).sum::<i64>()).to_string()\n     }\n")),(0,i.kt)("p",null,"You can also see that it simplifies the meaning a bit and it is more explicit than\nthe previous versions."),(0,i.kt)("p",null,"And for the tests:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"     #[test]\n     fn test_from() {\n-        for (n, s) in EXAMPLES.iter() {\n-            assert_eq!(from_snafu(s), *n);\n+        for (&n, s) in EXAMPLES.iter() {\n+            assert_eq!(s.parse::<SNAFU>().unwrap().value, n);\n         }\n     }\n \n     #[test]\n     fn test_to() {\n-        for (n, s) in EXAMPLES.iter() {\n-            assert_eq!(to_snafu(*n), s.to_string());\n+        for (&n, s) in EXAMPLES.iter() {\n+            assert_eq!(SNAFU::from(n).to_string(), s.to_string());\n         }\n")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Let's wrap the whole thing up! Keeping in mind both AoC and the Rust\u2026"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Finished advent calendar :smile:",src:n(3321).Z,width:"2417",height:"1984"})),(0,i.kt)("h3",{id:"advent-of-code"},"Advent of Code"),(0,i.kt)("p",null,"This year was quite fun, even though most of the solutions and posts came in\nlater on (",(0,i.kt)("em",{parentName:"p"},"cough")," in '23 ",(0,i.kt)("em",{parentName:"p"},"cough"),"). Day 22 was the most obnoxious one\u2026 And also\nit feels like I used priority queues and tree data structures ",(0,i.kt)("strong",{parentName:"p"},"a lot")," \ud83d\udc40"),(0,i.kt)("h3",{id:"with-rust"},"with Rust"),(0,i.kt)("p",null,"I must admit that a lot of compiler warnings and errors were very useful. Even\nthough I still found some instances where they didn't help at all or cause even\nworse issues than I had. Compilation times have been addressed with the caching."),(0,i.kt)("p",null,"Building my first tree data structure in Rust has been a very \u201cinteresting\u201d\njourney. Being able to write a more generic BFS algorithm that allows you to not\nduplicate code while still mantaining the desired functionality contributes to\na very readable code."),(0,i.kt)("p",null,"I am definitely much more aware of the basic things that bloated Python is\nmissing, yet Rust has them\u2026"),(0,i.kt)("p",null,"Using explicit types and writing down placeholder functions with ",(0,i.kt)("inlineCode",{parentName:"p"},"todo!()"),"\nmacros is very pleasant, since it allows you to easily navigate the type system\nduring the development when you don't even need to be sure how are you going to\nput the smaller pieces together."),(0,i.kt)("p",null,"I have used a plethora of traits and also implemented some of them to either be\nidiomatic, or exploit the syntactic sugar they offer. Deriving the default trait\nimplementation is also very helpful in a lot of cases, e.g. debugging output,\ncopying, equality comparison, etc."),(0,i.kt)("p",null,"I confess to touching more \u201ccursed\u201d parts of the Rust, such as macros to\ndeclutter the copy-paste for tests or writing my own structures that need to\ncarry a lifetime for their own fields."),(0,i.kt)("p",null,"tl;dr Relatively pleasant language until you hit brick wall \ud83d\ude09"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"See you next year! Maybe in Rust, maybe not \ud83d\ude43"))}d.isMDXComponent=!0},3321:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/calendar-f891b624f3e0efb34bba582100a7d8df.png"}}]);