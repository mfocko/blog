"use strict";(self.webpackChunkfi=self.webpackChunkfi||[]).push([[3731],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},905:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={title:"Advent of Code '22 in Rust",description:"Preparing for Advent of Code '22.",date:"2022-12-14T21:45",slug:"aoc-2022/intro",authors:"mf",tags:["advent-of-code","advent-of-code-2022","rust"],hide_table_of_contents:!1},i=void 0,s={permalink:"/blog/aoc-2022/intro",editUrl:"https://gitlab.com/mfocko/blog/tree/main/blog/aoc-2022/00-intro.md",source:"@site/blog/aoc-2022/00-intro.md",title:"Advent of Code '22 in Rust",description:"Preparing for Advent of Code '22.",date:"2022-12-14T21:45:00.000Z",formattedDate:"December 14, 2022",tags:[{label:"advent-of-code",permalink:"/blog/tags/advent-of-code"},{label:"advent-of-code-2022",permalink:"/blog/tags/advent-of-code-2022"},{label:"rust",permalink:"/blog/tags/rust"}],readingTime:8.665,hasTruncateMarker:!0,authors:[{name:"Matej Focko",email:"me+blog@mfocko.xyz",title:"a.k.a. @mf",url:"https://gitlab.com/mfocko",imageURL:"https://github.com/mfocko.png",key:"mf"}],frontMatter:{title:"Advent of Code '22 in Rust",description:"Preparing for Advent of Code '22.",date:"2022-12-14T21:45",slug:"aoc-2022/intro",authors:"mf",tags:["advent-of-code","advent-of-code-2022","rust"],hide_table_of_contents:!1},prevItem:{title:"1st week of Advent of Code '22 in Rust",permalink:"/blog/aoc-2022/1st-week"}},l={authorsImageUrls:[void 0]},p=[{value:"Choosing a language",id:"choosing-a-language",level:2},{value:"Choosing libraries",id:"choosing-libraries",level:2},{value:"Preparations for Rust",id:"preparations-for-rust",level:2},{value:"Toolkit",id:"toolkit",level:3},{value:"Libraries",id:"libraries",level:3},{value:"My own \u201clibrary\u201d",id:"my-own-library",level:3},{value:"Skeleton",id:"skeleton",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Let's talk about the preparations for this year's ",(0,r.kt)("a",{parentName:"p",href:"https://adventofcode.com"},(0,r.kt)("em",{parentName:"a"},"Advent of Code")),"."),(0,r.kt)("h2",{id:"choosing-a-language"},"Choosing a language"),(0,r.kt)("p",null,"When choosing a language for AoC, you usually want a language that gives you a\nquick feedback which allows you to iterate quickly to the solution of the puzzle.\nOne of the most common choices is Python, many people also use JavaScript or Ruby."),(0,r.kt)("p",null,"Given the competitive nature of the AoC and popularity among competitive programming,\nC++ might be also a very good choice. Only if you are familiar with it, I guess\u2026"),(0,r.kt)("p",null,"If you want a challenge, you might also choose to rotate the languages each day.\nThough I prefer to use only one language."),(0,r.kt)("p",null,"For this year I have been deciding between ",(0,r.kt)("em",{parentName:"p"},"Rust"),", ",(0,r.kt)("em",{parentName:"p"},"C++")," and ",(0,r.kt)("em",{parentName:"p"},"Pascal")," or ",(0,r.kt)("em",{parentName:"p"},"Ada"),"."),(0,r.kt)("p",null,"I have tried Rust last year and have survived with it for 3 days and then gave\nup and switched to ",(0,r.kt)("em",{parentName:"p"},"Kotlin"),", which was pretty good given it is \u201cJava undercover\u201d.\nI pretty much like the ideas behind Rust, I am not sure about the whole cult and\nimplementation of those ideas though. After some years with C/C++, I would say\nthat Rust feels ",(0,r.kt)("em",{parentName:"p"},"too safe")," for my taste and tries to \u201c",(0,r.kt)("em",{parentName:"p"},"punish me"),"\u201d even for the\nmost trivial things."),(0,r.kt)("p",null,"C++ is a very robust, but also comes with a wide variety of options providing you\nthe ability to shoot yourself in the leg. I have tried to solve few days of previous\nAdvent of Code events, it was ",(0,r.kt)("em",{parentName:"p"},"relatively easy")," to solve the problems in C++, given\nthat I do not admit writing my own iterator for ",(0,r.kt)("inlineCode",{parentName:"p"},"enumerate"),"\u2026"),(0,r.kt)("p",null,"Pascal or Ada were meme choices :) Ada is heavily inspired by Pascal and has a\npretty nice standard library that offers enough to be able to quickly solve some\nproblems in it. However the toolkit is questionable :/"),(0,r.kt)("h2",{id:"choosing-libraries"},"Choosing libraries"),(0,r.kt)("h2",{id:"preparations-for-rust"},"Preparations for Rust"),(0,r.kt)("p",null,"All of the sources, later on including solutions, can be found at my\n",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.com/mfocko/advent-of-code-2022"},"GitLab"),"."),(0,r.kt)("h3",{id:"toolkit"},"Toolkit"),(0,r.kt)("p",null,"Since we are using Rust, we are going to use a ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/cargo/"},"Cargo")," and more than likely VSCode\nwith ",(0,r.kt)("a",{parentName:"p",href:"https://rust-analyzer.github.io/"},(0,r.kt)("inlineCode",{parentName:"a"},"rust-analyzer")),". Because of my choice of libraries, we will also introduce\na ",(0,r.kt)("inlineCode",{parentName:"p"},".envrc")," file that can be used by ",(0,r.kt)("a",{parentName:"p",href:"https://direnv.net/"},(0,r.kt)("inlineCode",{parentName:"a"},"direnv")),", which allows you to set specific\nenvironment variables when you enter a directory. In our case, we will use"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# to show nice backtrace when using the color-eyre\nexport RUST_BACKTRACE=1\n\n# to catch logs generated by tracing\nexport RUST_LOG=trace\n")),(0,r.kt)("p",null,"And for the one of the most obnoxious things ever, we will use a script to download\nthe inputs instead of \u201c",(0,r.kt)("em",{parentName:"p"},"clicking, opening and copying to a file"),"\u201d",(0,r.kt)("sup",{parentName:"p",id:"fnref-1-793a30"},(0,r.kt)("a",{parentName:"sup",href:"#fn-1-793a30",className:"footnote-ref"},"1")),". There is\nno need to be ",(0,r.kt)("em",{parentName:"p"},"fancy"),", so we will adjust Python script by Martin",(0,r.kt)("sup",{parentName:"p",id:"fnref-2-793a30"},(0,r.kt)("a",{parentName:"sup",href:"#fn-2-793a30",className:"footnote-ref"},"2")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'#!/usr/bin/env python3\n\nimport datetime\nimport yaml\nimport requests\nimport sys\n\n\ndef load_config():\n    with open("env.yaml", "r") as f:\n        js = yaml.load(f, Loader=yaml.Loader)\n        return js["session"], js["year"]\n\n\ndef get_input(session, year, day):\n    return requests.get(\n        f"https://adventofcode.com/{year}/day/{day}/input",\n        cookies={"session": session},\n        headers={\n            "User-Agent": "{repo} by {mail}".format(\n                repo="gitlab.com/mfocko/advent-of-code-2022",\n                mail="me@mfocko.xyz",\n            )\n        },\n    ).content.decode("utf-8")\n\n\ndef main():\n    day = datetime.datetime.now().day\n    if len(sys.argv) == 2:\n        day = sys.argv[1]\n\n    session, year = load_config()\n    problem_input = get_input(session, year, day)\n\n    with open(f"./inputs/day{day:>02}.txt", "w") as f:\n        f.write(problem_input)\n\n\nif __name__ == "__main__":\n    main()\n')),(0,r.kt)("p",null,"If the script is called without any arguments, it will deduce the day from the\nsystem, so we do not need to change the day every morning. It also requires a\nconfiguration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# env.yaml\nsession: \u2039your session cookie\u203a\nyear: 2022\n")),(0,r.kt)("h3",{id:"libraries"},"Libraries"),(0,r.kt)("p",null,"Looking at the list of the libraries, I have chosen \u201ca lot\u201d of them. Let's walk\nthrough each of them."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/tracing"},(0,r.kt)("inlineCode",{parentName:"a"},"tracing"))," and ",(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/tracing-subscriber"},(0,r.kt)("inlineCode",{parentName:"a"},"tracing-subscriber"))," are the crates that can be used for tracing\nand logging of your Rust programs, there are also other crates that can help you\nwith providing backtrace to the Sentry in case you have deployed your application\nsomewhere and you want to watch over it. In our use case we will just utilize the\nmacros for debugging in the terminal."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/thiserror"},(0,r.kt)("inlineCode",{parentName:"a"},"thiserror")),", ",(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/anyhow"},(0,r.kt)("inlineCode",{parentName:"a"},"anyhow"))," and ",(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/color-eyre"},(0,r.kt)("inlineCode",{parentName:"a"},"color-eyre"))," are used for error reporting.\n",(0,r.kt)("inlineCode",{parentName:"p"},"thiserror")," is a very good choice for libraries, cause it extends the ",(0,r.kt)("inlineCode",{parentName:"p"},"Error"),"\nfrom the ",(0,r.kt)("inlineCode",{parentName:"p"},"std")," and allows you to create more convenient error types. Next is\n",(0,r.kt)("inlineCode",{parentName:"p"},"anyhow")," which kinda builds on top of the ",(0,r.kt)("inlineCode",{parentName:"p"},"thiserror")," and provides you with simpler\nerror handling in binaries",(0,r.kt)("sup",{parentName:"p",id:"fnref-3-793a30"},(0,r.kt)("a",{parentName:"sup",href:"#fn-3-793a30",className:"footnote-ref"},"3")),". And finally we have ",(0,r.kt)("inlineCode",{parentName:"p"},"color-eyre")," which, as I found\nout later, is a colorful (",(0,r.kt)("em",{parentName:"p"},"wink wink"),") extension of ",(0,r.kt)("inlineCode",{parentName:"p"},"eyre")," which is fork of ",(0,r.kt)("inlineCode",{parentName:"p"},"anyhow"),"\nwhile supporting customized reports."),(0,r.kt)("p",null,"In the end I have decided to remove ",(0,r.kt)("inlineCode",{parentName:"p"},"thiserror")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"anyhow"),", since first one is\nsuitable for libraries and the latter was basically fully replaced by ",(0,r.kt)("inlineCode",{parentName:"p"},"{color-,}eyre"),"."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/regex"},(0,r.kt)("inlineCode",{parentName:"a"},"regex"))," and ",(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/lazy_static"},(0,r.kt)("inlineCode",{parentName:"a"},"lazy_static"))," are a very good and also, I hope, self-explanatory\ncombination. ",(0,r.kt)("inlineCode",{parentName:"p"},"lazy_static")," allows you to have static variables that must be initialized\nduring runtime."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/itertools"},(0,r.kt)("inlineCode",{parentName:"a"},"itertools"))," provides some nice extensions to the iterators from the ",(0,r.kt)("inlineCode",{parentName:"p"},"std"),"."),(0,r.kt)("h3",{id:"my-own-library"},"My own \u201clibrary\u201d"),(0,r.kt)("p",null,"When creating the crate for this year's Advent of Code, I have chosen a library\ntype. Even though standard library is huge, some things might not be included and\nalso we can follow ",(0,r.kt)("em",{parentName:"p"},"KISS"),". I have 2 modules that my \u201clibrary\u201d exports, one for\nparsing and one for 2D vector (that gets used quite often during Advent of Code)."),(0,r.kt)("p",null,"Key part is, of course, processing the input and my library exports following\nfunctions that get used a lot:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// Reads file to the string.\npub fn file_to_string<P: AsRef<Path>>(pathname: P) -> String;\n\n/// Reads file and returns it as a vector of characters.\npub fn file_to_chars<P: AsRef<Path>>(pathname: P) -> Vec<char>;\n\n/// Reads file and returns a vector of parsed structures. Expects each structure\n/// on its own line in the file. And `T` needs to implement `FromStr` trait.\npub fn file_to_structs<P: AsRef<Path>, T: FromStr>(pathname: P) -> Vec<T>\nwhere\n    <T as FromStr>::Err: Debug;\n\n/// Converts iterator over strings to a vector of parsed structures. `T` needs\n/// to implement `FromStr` trait and its error must derive `Debug` trait.\npub fn strings_to_structs<T: FromStr, U>(\n  iter: impl Iterator<Item = U>\n) -> Vec<T>\nwhere\n    <T as std::str::FromStr>::Err: std::fmt::Debug,\n    U: Deref<Target = str>;\n\n/// Reads file and returns it as a vector of its lines.\npub fn file_to_lines<P: AsRef<Path>>(pathname: P) -> Vec<String>;\n")),(0,r.kt)("p",null,"As for the vector, I went with a rather simple implementation that allows only\naddition of the vectors for now and accessing the elements via functions ",(0,r.kt)("inlineCode",{parentName:"p"},"x()"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"y()"),". Also the vector is generic, so we can use it with any numeric type we\nneed."),(0,r.kt)("h3",{id:"skeleton"},"Skeleton"),(0,r.kt)("p",null,"We can also prepare a template to quickly bootstrap each of the days. We know\nthat each puzzle has 2 parts, which means that we can start with 2 functions that\nwill solve them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn part1(input: &Input) -> Output {\n    todo!()\n}\n\nfn part2(input: &Input) -> Output {\n    todo!()\n}\n")),(0,r.kt)("p",null,"Both functions take reference to the input and return some output (in majority\nof puzzles, it is the same type). ",(0,r.kt)("inlineCode",{parentName:"p"},"todo!()")," can be used as a nice placeholder,\nit also causes a panic when reached and we could also provide some string with\nan explanation, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},'todo!("part 1")'),". We have not given functions a specific\ntype and to avoid as much copy-paste as possible, we will introduce type aliases."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"type Input = String;\ntype Output = i32;\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This allows us to quickly adjust the types only in one place without the need to\ndo ",(0,r.kt)("em",{parentName:"p"},"regex-replace")," or replace them manually.")),(0,r.kt)("p",null,"For each day we get a personalized input that is provided as a text file. Almost\nall the time, we would like to get some structured type out of that input, and\ntherefore it makes sense to introduce a new function that will provide the parsing\nof the input."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn parse_input(path: &str) -> Input {\n    todo!()\n}\n")),(0,r.kt)("p",null,"This \u201cparser\u201d will take a path to the file, just in case we would like to run the\nsample instead of input."),(0,r.kt)("p",null,"OK, so now we can write a ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," function that will take all of the pieces and\nrun them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let input = parse_input("inputs/dayXX.txt");\n\n    println!("Part 1: {}", part_1(&input));\n    println!("Part 2: {}", part_2(&input));\n}\n')),(0,r.kt)("p",null,"This would definitely do :) But we have installed a few libraries and we want to\nuse them. In this part we are going to utilize ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://crates.io/crates/tracing"},(0,r.kt)("inlineCode",{parentName:"a"},"tracing")))," (for tracing, duh\u2026)\nand ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"https://crates.io/crates/color-eyre"},(0,r.kt)("inlineCode",{parentName:"a"},"color-eyre")))," (for better error reporting, e.g. from parsing)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() -> Result<()> {\n    tracing_subscriber::fmt()\n        .with_env_filter(EnvFilter::from_default_env())\n        .with_target(false)\n        .with_file(true)\n        .with_line_number(true)\n        .without_time()\n        .compact()\n        .init();\n    color_eyre::install()?;\n\n    let input = parse_input("inputs/dayXX.txt");\n\n    info!("Part 1: {}", part_1(&input));\n    info!("Part 2: {}", part_2(&input));\n\n    Ok(())\n}\n')),(0,r.kt)("p",null,"The first statement will set up tracing and configure it to print out the logs to\nterminal, based on the environment variable. We also change the formatting a bit,\nsince we do not need all the ",(0,r.kt)("em",{parentName:"p"},"fancy")," features of the logger. Pure initialization\nwould get us logs like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"2022-12-11T19:53:19.975343Z  INFO day01: Part 1: 0\n")),(0,r.kt)("p",null,"However after running that command, we will get the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," INFO src/bin/day01.rs:35: Part 1: 0\n")),(0,r.kt)("p",null,"And the ",(0,r.kt)("inlineCode",{parentName:"p"},"color_eyre::install()?")," is quite straightforward. We just initialize the\nerror reporting by ",(0,r.kt)("em",{parentName:"p"},"color eyre"),"."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Notice that we had to add ",(0,r.kt)("inlineCode",{parentName:"p"},"Ok(())")," to the end of the function and adjust the\nreturn type of the ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Result<()>"),". It is caused by the ",(0,r.kt)("em",{parentName:"p"},"color eyre")," that\ncan be installed only once and therefore it can fail, that is how we got the ",(0,r.kt)("inlineCode",{parentName:"p"},"?"),"\nat the end of the ",(0,r.kt)("inlineCode",{parentName:"p"},"::install")," which ",(0,r.kt)("em",{parentName:"p"},"unwraps")," the ",(0,r.kt)("strong",{parentName:"p"},"\xbbresult\xab")," of the installation.")),(0,r.kt)("p",null,"Overall we will get to a template like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use aoc_2022::*;\n\nuse color_eyre::eyre::Result;\nuse tracing::info;\nuse tracing_subscriber::EnvFilter;\n\ntype Input = String;\ntype Output = i32;\n\nfn parse_input(path: &str) -> Input {\n    todo!()\n}\n\nfn part1(input: &Input) -> Output {\n    todo!()\n}\n\nfn part2(input: &Input) -> Output {\n    todo!()\n}\n\nfn main() -> Result<()> {\n    tracing_subscriber::fmt()\n        .with_env_filter(EnvFilter::from_default_env())\n        .with_target(false)\n        .with_file(true)\n        .with_line_number(true)\n        .without_time()\n        .compact()\n        .init();\n    color_eyre::install()?;\n\n    let input = parse_input("inputs/dayXX.txt");\n\n    info!("Part 1: {}", part_1(&input));\n    info!("Part 2: {}", part_2(&input));\n\n    Ok(())\n}\n')),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-1-793a30"},"Copy-pasting might be a relaxing thing to do, but you can also discover\nnasty stuff about your PC. See ",(0,r.kt)("a",{parentName:"li",href:"https://www.reddit.com/r/adventofcode/comments/zb98pn/comment/iyq0ono"},"this Reddit post and the comment"),".",(0,r.kt)("a",{parentName:"li",href:"#fnref-1-793a30",className:"footnote-backref"},"\u21a9")),(0,r.kt)("li",{parentName:"ol",id:"fn-2-793a30"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/martinjonas"},"GitHub profile"),(0,r.kt)("a",{parentName:"li",href:"#fnref-2-793a30",className:"footnote-backref"},"\u21a9")),(0,r.kt)("li",{parentName:"ol",id:"fn-3-793a30"},"Even though you can use it even for libraries, but handling errors from\nlibraries using ",(0,r.kt)("inlineCode",{parentName:"li"},"anyhow")," is nasty\u2026 You will be the stinky one ;)",(0,r.kt)("a",{parentName:"li",href:"#fnref-3-793a30",className:"footnote-backref"},"\u21a9")))))}d.isMDXComponent=!0}}]);