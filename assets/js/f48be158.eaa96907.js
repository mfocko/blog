"use strict";(self.webpackChunkfi=self.webpackChunkfi||[]).push([[4064],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),h=o,c=d["".concat(s,".").concat(h)]||d[h]||m[h]||i;return n?a.createElement(c,r(r({ref:t},p),{},{components:n})):a.createElement(c,r({ref:t},p))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,r[1]=l;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9859:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(7462),o=(n(7294),n(3905));const i={title:"3rd week of Advent of Code '22 in Rust",description:"Surviving third week in Rust.",date:"2023-07-06T21:00",slug:"aoc-2022/3rd-week",authors:"mf",tags:["advent-of-code","advent-of-code-2022","rust"],hide_table_of_contents:!1},r=void 0,l={permalink:"/blog/aoc-2022/3rd-week",editUrl:"https://gitlab.com/mfocko/blog/tree/main/blog/aoc-2022/03-week-3.md",source:"@site/blog/aoc-2022/03-week-3.md",title:"3rd week of Advent of Code '22 in Rust",description:"Surviving third week in Rust.",date:"2023-07-06T21:00:00.000Z",formattedDate:"July 6, 2023",tags:[{label:"advent-of-code",permalink:"/blog/tags/advent-of-code"},{label:"advent-of-code-2022",permalink:"/blog/tags/advent-of-code-2022"},{label:"rust",permalink:"/blog/tags/rust"}],readingTime:11.565,hasTruncateMarker:!0,authors:[{name:"Matej Focko",email:"me+blog@mfocko.xyz",title:"a.k.a. @mf",url:"https://gitlab.com/mfocko",imageURL:"https://github.com/mfocko.png",key:"mf"}],frontMatter:{title:"3rd week of Advent of Code '22 in Rust",description:"Surviving third week in Rust.",date:"2023-07-06T21:00",slug:"aoc-2022/3rd-week",authors:"mf",tags:["advent-of-code","advent-of-code-2022","rust"],hide_table_of_contents:!1},prevItem:{title:"4th week of Advent of Code '22 in Rust",permalink:"/blog/aoc-2022/4th-week"},nextItem:{title:"Sort the matrix diagonally",permalink:"/blog/leetcode/sort-diagonally"}},s={authorsImageUrls:[void 0]},u=[{value:"Day 15: Beacon Exclusion Zone",id:"day-15-beacon-exclusion-zone",level:2},{value:"Solution",id:"solution",level:3},{value:"Day 16: Proboscidea Volcanium",id:"day-16-proboscidea-volcanium",level:2},{value:"Solution",id:"solution-1",level:3},{value:"Indexing in graph",id:"indexing-in-graph",level:4},{value:"Cartesian product",id:"cartesian-product",level:4},{value:"\u201cImplementing\u201d an iterator",id:"implementing-an-iterator",level:4},{value:"Day 17: Pyroclastic Flow",id:"day-17-pyroclastic-flow",level:2},{value:"Solution",id:"solution-2",level:3},{value:"Collision detection",id:"collision-detection",level:4},{value:"Infinite iterator",id:"infinite-iterator",level:4},{value:"Day 18: Boiling Boulders",id:"day-18-boiling-boulders",level:2},{value:"Solution",id:"solution-3",level:3},{value:"Day 19: Not Enough Minerals",id:"day-19-not-enough-minerals",level:2},{value:"Solution",id:"solution-4",level:3},{value:"Day 20: Grove Positioning System",id:"day-20-grove-positioning-system",level:2},{value:"Solution",id:"solution-5",level:3},{value:"<code>.borrow_mut()</code>",id:"borrow_mut",level:4},{value:"<code>.borrow_mut()</code> on <code>Rc&lt;RefCell&lt;T&gt;&gt;</code>",id:"borrow_mut-on-rcrefcellt",level:5},{value:"<code>BorrowMut</code> trait",id:"borrowmut-trait",level:5},{value:"Conflict",id:"conflict",level:5},{value:"Day 21: Monkey Math",id:"day-21-monkey-math",level:2},{value:"Solution",id:"solution-6",level:3},{value:"<code>Default</code> trait",id:"default-trait",level:4},{value:"Abusing negation",id:"abusing-negation",level:4}],p={toc:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Let's go through the third week of ",(0,o.kt)("a",{parentName:"p",href:"https://adventofcode.com"},(0,o.kt)("em",{parentName:"a"},"Advent of Code"))," in Rust."),(0,o.kt)("h2",{id:"day-15-beacon-exclusion-zone"},(0,o.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/15"},"Day 15: Beacon Exclusion Zone")),(0,o.kt)("admonition",{title:"tl;dr",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Triangulating a distress beacon based on the information from the sensors.")),(0,o.kt)("h3",{id:"solution"},"Solution"),(0,o.kt)("p",null,"Relatively easy thing to implement, no major Rust issues hit."),(0,o.kt)("h2",{id:"day-16-proboscidea-volcanium"},(0,o.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/16"},"Day 16: Proboscidea Volcanium")),(0,o.kt)("admonition",{title:"tl;dr",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Finding a max flow in a graph given some time constraints.")),(0,o.kt)("h3",{id:"solution-1"},"Solution"),(0,o.kt)("p",null,"I have used some interesting things to implement this and make it easier for me."),(0,o.kt)("h4",{id:"indexing-in-graph"},"Indexing in graph"),(0,o.kt)("p",null,"I have come across a situation where I needed to keep more information regarding\nthe graph\u2026 In that case you can, of course, create a structure and keep it in,\nbut once you have multiple members in the structure it gets harder to work with\nsince you need to address the fields in the structure. When you work with graph,\nyou frequently need to access the vertices and in this case it felt a lot easier\nto implement the indexing in a graph, rather than explicitly access the\nunderlying data structure."),(0,o.kt)("p",null,"Here you can see a rather short snippet from the solution that allows you to\n\u201cindex\u201d the graph:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl Index<&str> for Graph {\n    type Output = Vertex;\n\n    fn index(&self, index: &str) -> &Self::Output {\n        &self.g[index]\n    }\n}\n")),(0,o.kt)("h4",{id:"cartesian-product"},"Cartesian product"),(0,o.kt)("p",null,"During the implementation I had to utilize Floyd-Warshall algorithm for finding\nthe shortest path between pairs of vertices and utilized the ",(0,o.kt)("inlineCode",{parentName:"p"},"iproduct!")," macro\nfrom the ",(0,o.kt)("a",{parentName:"p",href:"https://crates.io/crates/itertools"},(0,o.kt)("inlineCode",{parentName:"a"},"itertools")),". It is a very useful higher-order function that allows\nyou to keep the nesting of the loops at a minimum level while still maintaining\nthe same functionality."),(0,o.kt)("h4",{id:"implementing-an-iterator"},"\u201cImplementing\u201d an iterator"),(0,o.kt)("p",null,"For the second part, you get to split the work between 2 actors. That way you\ncan achieve higher efficiency of the whole process that you're planning, but it\nalso makes it harder to evaluate algorithmically, since you need to check the\ndifferent ways the work can be split."),(0,o.kt)("p",null,"Being affected by ",(0,o.kt)("em",{parentName:"p"},"functional programming brain damage"),"\u2122\ufe0f, I have chosen to\ndo this part by function that returns an iterator over the possible ways:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"fn pairings(\n    valves: &BTreeSet<String>,\n) -> impl Iterator<Item = (BTreeSet<String>, BTreeSet<String>)> + '_ {\n    let mapping = valves.iter().collect_vec();\n\n    let max_mask = 1 << (valves.len() - 1);\n\n    (0..max_mask).map(move |mask| {\n        let mut elephant = BTreeSet::new();\n        let mut human = BTreeSet::new();\n\n        for (i, &v) in mapping.iter().enumerate() {\n            if (mask & (1 << i)) == 0 {\n                human.insert(v.clone());\n            } else {\n                elephant.insert(v.clone());\n            }\n        }\n\n        (human, elephant)\n    })\n}\n")),(0,o.kt)("h2",{id:"day-17-pyroclastic-flow"},(0,o.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/17"},"Day 17: Pyroclastic Flow")),(0,o.kt)("admonition",{title:"tl;dr",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Simulating an autonomous Tetris where pieces get affected by a series of jets of\nhot gas.")),(0,o.kt)("h3",{id:"solution-2"},"Solution"),(0,o.kt)("p",null,"Similarly to the previous day I have created some iterators \ud83d\ude04"),(0,o.kt)("h4",{id:"collision-detection"},"Collision detection"),(0,o.kt)("p",null,"Once you need to check for collisions it is very helpful to be able to just\niterate through the positions that can actually collide with the wall or other\npiece."),(0,o.kt)("p",null,"To get the desired behaviour, you can just compose few smaller functions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"fn occupied(shape: &[Vec<char>]) -> impl Iterator<Item = Position> + '_ {\n    shape.iter().enumerate().flat_map(|(y, row)| {\n        row.iter().enumerate().filter_map(move |(x, c)| {\n            if c == &'#' {\n                Some(Vector2D::new(x as isize, y as isize))\n            } else {\n                None\n            }\n        })\n    })\n}\n")),(0,o.kt)("p",null,"In the end, we get relative positions which we can adjust later when given the\nspecific positions from iterator. You can see some interesting parts in this:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".enumerate()")," allows us to get both the indices (coordinates) and the line\nor, later on, the character itself,"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".flat_map()")," flattens the iterator, i.e. when we return another iterator,\nthey just get chained instead of iterating over iterators (which sounds pretty\ndisturbing, doesn't it?),"),(0,o.kt)("li",{parentName:"ul"},"and finally ",(0,o.kt)("inlineCode",{parentName:"li"},".filter_map()")," which is pretty similar to the \u201cbasic\u201d ",(0,o.kt)("inlineCode",{parentName:"li"},".map()"),"\nwith a one, key, difference that it expects the items of an iterator to be\nmapped to an ",(0,o.kt)("inlineCode",{parentName:"li"},"Option<T>")," from which it ignores nothing (as in ",(0,o.kt)("inlineCode",{parentName:"li"},"None")," \ud83d\ude09)\nand also unwraps the values from ",(0,o.kt)("inlineCode",{parentName:"li"},"Some(\u2026)"),".")),(0,o.kt)("h4",{id:"infinite-iterator"},"Infinite iterator"),(0,o.kt)("p",null,"In the solution we cycle through both Tetris-like shapes that fall down and the\njets that move our pieces around. Initially I have implemented my own infinite\niterator that just yields the indices. It is a very simple, yet powerful, piece\nof code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"struct InfiniteIndex {\n    size: usize,\n    i: usize,\n}\n\nimpl InfiniteIndex {\n    fn new(size: usize) -> InfiniteIndex {\n        InfiniteIndex { size, i: size - 1 }\n    }\n}\n\nimpl Iterator for InfiniteIndex {\n    type Item = usize;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        self.i = (self.i + 1) % self.size;\n        Some(self.i)\n    }\n}\n")),(0,o.kt)("p",null,"However when I'm looking at the code now, it doesn't really make much sense\u2026\nGuess what, we can use a built-in function that is implemented on iterators for\nthat! The function is called ",(0,o.kt)("inlineCode",{parentName:"p"},".cycle()")),(0,o.kt)("p",null,"On the other hand, I am not going to switch to that function, since it would\nintroduce an another myriad of issues caused by the fact that I create iterators\nright away in the constructor of my structure and the iterators would borrow\nboth the jets and shapes which would introduce a lifetime dependency into the\nstructure."),(0,o.kt)("h2",{id:"day-18-boiling-boulders"},(0,o.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/18"},"Day 18: Boiling Boulders")),(0,o.kt)("admonition",{title:"tl;dr",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Let's compute a surface area of some obsidian approximated via coordinates of\ncubes.")),(0,o.kt)("h3",{id:"solution-3"},"Solution"),(0,o.kt)("p",null,"This day is kinda interesting, because it shows how easily you can complicate the\nproblem and also how much can you screw yourself over with the optimization and\n\u201csmart\u201d approach."),(0,o.kt)("p",null,"For the first part you need to find the surface area of an obsidian that is\napproximated by cubes. Now, that is a very easy thing to do, just keep the track\nof already added cubes, and check if the newly added cube touches any face of any\nother cube. Simple, and with a ",(0,o.kt)("inlineCode",{parentName:"p"},"BTreeSet")," relatively efficient way to do it."),(0,o.kt)("p",null,"However the second part lets you on a secret that there may be some surface area\nfrom the \u201cinside\u201d too and you want to know only the one from the outside of the\nobsidian. I have seen some solutions later, but if you check your data, you might\nnotice that the bounding box of all the cubes isn't that big at all. Therefore I\nchose to pre-construct the box beforehand, fill in the cubes and then just run a\nBFS turning all the lava on the outside into the air. Now you just need to check\ncubes and count how many of their faces touch the air."),(0,o.kt)("h2",{id:"day-19-not-enough-minerals"},(0,o.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/19"},"Day 19: Not Enough Minerals")),(0,o.kt)("admonition",{title:"tl;dr",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Finding out the best strategy for building robots to collect geodes.")),(0,o.kt)("h3",{id:"solution-4"},"Solution"),(0,o.kt)("p",null,"Not much interesting stuff to mention apart from the suggestion to never believe\nthat the default implementation given by ",(0,o.kt)("inlineCode",{parentName:"p"},"derive")," macro is what you want, it\ndoesn't have to be. \ud83d\ude04"),(0,o.kt)("h2",{id:"day-20-grove-positioning-system"},(0,o.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/20"},"Day 20: Grove Positioning System")),(0,o.kt)("admonition",{title:"tl;dr",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Shuffling around the ",(0,o.kt)("em",{parentName:"p"},"circular linked list")," to find the coordinates.")),(0,o.kt)("p",null,"Now, small rant for this day is in place. They've never mentioned that coordinates\ncan repeat and therefore the values are non-unique. This is something that did\nnot happen in the given sample, but was present in the user input. It took \xbba lot\xab\nto realize that this is the issue."),(0,o.kt)("h3",{id:"solution-5"},"Solution"),(0,o.kt)("p",null,"I have tried implementing a circular linked list for this\u2026 and I have failed\nmiserably. To be fair, I still have no clue why. It was \u201cfun\u201d to play around with\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"Rc<RefCell<T>>"),". In the end I failed on ",(0,o.kt)("em",{parentName:"p"},"wrong answer"),". I have also encountered\na rather interesting issue with ",(0,o.kt)("inlineCode",{parentName:"p"},".borrow_mut()")," method being used on ",(0,o.kt)("inlineCode",{parentName:"p"},"Rc<RefCell<T>>"),"."),(0,o.kt)("h4",{id:"borrow_mut"},(0,o.kt)("inlineCode",{parentName:"h4"},".borrow_mut()")),(0,o.kt)("p",null,"Consider the following snippet of the code (taken from the documentation):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use std::cell::{RefCell, RefMut};\nuse std::collections::HashMap;\nuse std::rc::Rc;\n// use std::borrow::BorrowMut;\n\nfn main() {\n    let shared_map: Rc<RefCell<_>> = Rc::new(RefCell::new(HashMap::new()));\n    // Create a new block to limit the scope of the dynamic borrow\n    {\n        let mut map: RefMut<_> = shared_map.borrow_mut();\n        map.insert("africa", 92388);\n        map.insert("kyoto", 11837);\n        map.insert("piccadilly", 11826);\n        map.insert("marbles", 38);\n    }\n\n    // Note that if we had not let the previous borrow of the cache fall out\n    // of scope then the subsequent borrow would cause a dynamic thread panic.\n    // This is the major hazard of using `RefCell`.\n    let total: i32 = shared_map.borrow().values().sum();\n    println!("{total}");\n}\n')),(0,o.kt)("p",null,"We allocate a hash map on the heap and then in the inner block, we borrow it as\na mutable reference, so that we can use it."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"It is a very primitive example for ",(0,o.kt)("inlineCode",{parentName:"p"},"Rc<RefCell<T>>")," and mutable borrow.")),(0,o.kt)("p",null,"If you uncomment the 4th line with ",(0,o.kt)("inlineCode",{parentName:"p"},"use std::borrow::BorrowMut;"),", you cannot\ncompile the code anymore, because of"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"   Compiling playground v0.0.1 (/playground)\nerror[E0308]: mismatched types\n  --\x3e src/main.rs:10:34\n   |\n10 |         let mut map: RefMut<_> = shared_map.borrow_mut();\n   |                      ---------   ^^^^^^^^^^^^^^^^^^^^^^^ expected struct `RefMut`, found mutable reference\n   |                      |\n   |                      expected due to this\n   |\n   = note:         expected struct `RefMut<'_, _>`\n           found mutable reference `&mut Rc<RefCell<HashMap<_, _>>>`\n\nerror[E0599]: no method named `insert` found for struct `RefMut<'_, _>` in the current scope\n  --\x3e src/main.rs:11:13\n   |\n11 |         map.insert(\"africa\", 92388);\n   |             ^^^^^^ method not found in `RefMut<'_, _>`\n\nerror[E0599]: no method named `insert` found for struct `RefMut<'_, _>` in the current scope\n  --\x3e src/main.rs:12:13\n   |\n12 |         map.insert(\"kyoto\", 11837);\n   |             ^^^^^^ method not found in `RefMut<'_, _>`\n\nerror[E0599]: no method named `insert` found for struct `RefMut<'_, _>` in the current scope\n  --\x3e src/main.rs:13:13\n   |\n13 |         map.insert(\"piccadilly\", 11826);\n   |             ^^^^^^ method not found in `RefMut<'_, _>`\n\nerror[E0599]: no method named `insert` found for struct `RefMut<'_, _>` in the current scope\n  --\x3e src/main.rs:14:13\n   |\n14 |         map.insert(\"marbles\", 38);\n   |             ^^^^^^ method not found in `RefMut<'_, _>`\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `playground` due to 5 previous errors\n")),(0,o.kt)("p",null,"It might seem ",(0,o.kt)("strong",{parentName:"p"},"a bit")," ridiculous. However, I got to a point where the compiler\nsuggested ",(0,o.kt)("inlineCode",{parentName:"p"},"use std::borrow::BorrowMut;")," and it resulted in breaking parts of the\ncode that worked previously. I think it may be a good idea to go over what is\nhappening here."),(0,o.kt)("h5",{id:"borrow_mut-on-rcrefcellt"},(0,o.kt)("inlineCode",{parentName:"h5"},".borrow_mut()")," on ",(0,o.kt)("inlineCode",{parentName:"h5"},"Rc<RefCell<T>>")),(0,o.kt)("p",null,"Let's consider a variable ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," of type ",(0,o.kt)("inlineCode",{parentName:"p"},"Rc<RefCell<T>>"),". What happens when you\ncall ",(0,o.kt)("inlineCode",{parentName:"p"},".borrow_mut()")," on it? We can look at the ",(0,o.kt)("inlineCode",{parentName:"p"},"Rc")," type, and\u2026 hang on! There is\nneither ",(0,o.kt)("inlineCode",{parentName:"p"},".borrow_mut()")," method or ",(0,o.kt)("inlineCode",{parentName:"p"},"BorrowMut")," trait implemented. How can we do it\nthen?"),(0,o.kt)("p",null,"Let's go further and we can see that ",(0,o.kt)("inlineCode",{parentName:"p"},"RefCell<T>")," implements a ",(0,o.kt)("inlineCode",{parentName:"p"},".borrow_mut()"),"\nmethod. OK, but how can we call it on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Rc<T>"),"? Easily! ",(0,o.kt)("inlineCode",{parentName:"p"},"Rc<T>")," implements\n",(0,o.kt)("inlineCode",{parentName:"p"},"Deref<T>")," and therefore you can call methods on ",(0,o.kt)("inlineCode",{parentName:"p"},"Rc<T>")," objects as if they were\n",(0,o.kt)("inlineCode",{parentName:"p"},"T")," objects. If we read on ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"Deref")," coercion"),", we can see the following:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If ",(0,o.kt)("inlineCode",{parentName:"p"},"T")," implements ",(0,o.kt)("inlineCode",{parentName:"p"},"Deref<Target = U>"),", \u2026:"),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"\u2026"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"T")," implicitly implements all the (immutable) methods of the type ",(0,o.kt)("inlineCode",{parentName:"li"},"U"),"."))),(0,o.kt)("p",null,"What is the requirement for the ",(0,o.kt)("inlineCode",{parentName:"p"},".borrow_mut()")," on ",(0,o.kt)("inlineCode",{parentName:"p"},"RefCell<T>"),"? Well, it needs\n",(0,o.kt)("inlineCode",{parentName:"p"},"&self"),", so the ",(0,o.kt)("inlineCode",{parentName:"p"},"Deref")," implements the ",(0,o.kt)("inlineCode",{parentName:"p"},".borrow_mut()")," for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Rc<RefCell<T>>"),"."),(0,o.kt)("h5",{id:"borrowmut-trait"},(0,o.kt)("inlineCode",{parentName:"h5"},"BorrowMut")," trait"),(0,o.kt)("p",null,"I have not been able to find a lot on this trait. My guess is that it provides a\nmethod instead of a syntactic sugar (",(0,o.kt)("inlineCode",{parentName:"p"},"&mut x"),") for the mutable borrow. And also\nit provides default implementations for the types:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl BorrowMut<str> for String\n\nimpl<T> BorrowMut<T> for &mut T\nwhere\n    T: ?Sized,\n\nimpl<T> BorrowMut<T> for T\nwhere\n    T: ?Sized,\n\nimpl<T, A> BorrowMut<[T]> for Vec<T, A>\nwhere\n    A: Allocator,\n\nimpl<T, A> BorrowMut<T> for Box<T, A>\nwhere\n    A: Allocator,\n    T: ?Sized,\n\nimpl<T, const N: usize> BorrowMut<[T]> for [T; N]\n")),(0,o.kt)("h5",{id:"conflict"},"Conflict"),(0,o.kt)("p",null,"Now the question is why did it break the code\u2026 My first take was that the type\n",(0,o.kt)("inlineCode",{parentName:"p"},"Rc<RefCell<T>>")," has some ",(0,o.kt)("em",{parentName:"p"},"specialized")," implementation of the ",(0,o.kt)("inlineCode",{parentName:"p"},".borrow_mut()")," and\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"use")," overrides it with the default, which is true ",(0,o.kt)("strong",{parentName:"p"},"in a sense"),". However\nthere is no ",(0,o.kt)("em",{parentName:"p"},"specialized")," implementation. Let's have a look at the trait and the\ntype signature on the ",(0,o.kt)("inlineCode",{parentName:"p"},"RefCell<T>"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"// trait\npub trait BorrowMut<Borrowed>: Borrow<Borrowed>\nwhere\n    Borrowed: ?Sized,\n{\n    fn borrow_mut(&mut self) -> &mut Borrowed;\n}\n\n// \u2039RefCell<T>.borrow_mut()\u203a type signature\npub fn borrow_mut(&self) -> RefMut<'_, T>\n")),(0,o.kt)("p",null,"I think that we can definitely agree on the fact that ",(0,o.kt)("inlineCode",{parentName:"p"},"RefMut<'_, T>")," is not the\n",(0,o.kt)("inlineCode",{parentName:"p"},"RefCell<T>"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"In my opinion"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"RefCell<T>")," implements a ",(0,o.kt)("strong",{parentName:"p"},"separate")," ",(0,o.kt)("inlineCode",{parentName:"p"},".borrow_mut()")," rather\nthan implementing the interface, because it ",(0,o.kt)("strong",{parentName:"p"},"cannot")," satisfy the type requirements\nof the trait."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"I wonder how are we expected to deal with this conflict, if and when, we need\nboth the ",(0,o.kt)("inlineCode",{parentName:"p"},".borrow_mut()")," of the trait and ",(0,o.kt)("inlineCode",{parentName:"p"},".borrow_mut()")," of the ",(0,o.kt)("inlineCode",{parentName:"p"},"RefCell<T>"),".")),(0,o.kt)("admonition",{title:"Fun fact",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"I was suggested by the compiler to do ",(0,o.kt)("inlineCode",{parentName:"p"},"use std::borrow::BorrowMut;")," and break the\ncode."),(0,o.kt)("p",{parentName:"admonition"},"So much for the ",(0,o.kt)("em",{parentName:"p"},"almighty")," and ",(0,o.kt)("em",{parentName:"p"},"helpful")," compiler\u2026")),(0,o.kt)("h2",{id:"day-21-monkey-math"},(0,o.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/21"},"Day 21: Monkey Math")),(0,o.kt)("admonition",{title:"tl;dr",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Computing an expression tree and then also finding ideal value for a node.")),(0,o.kt)("h3",{id:"solution-6"},"Solution"),(0,o.kt)("p",null,"Relatively simple, until you get to the 2nd part where you start to practice\na lot of the copy-paste. I have managed to sneak some perverted stuff in there\nthough :) Let's go through the details."),(0,o.kt)("h4",{id:"default-trait"},(0,o.kt)("inlineCode",{parentName:"h4"},"Default")," trait"),(0,o.kt)("p",null,"For the first time and twice I had a need to have a default value for my types,\nenumerations in this case. Rust offers a very nice trait",(0,o.kt)("sup",{parentName:"p",id:"fnref-1-990909"},(0,o.kt)("a",{parentName:"sup",href:"#fn-1-990909",className:"footnote-ref"},"1"))," that is described\nas:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"A trait for giving a type a useful default value.")),(0,o.kt)("p",null,"I guess it sums it up nicely. The more interesting part about this is the fact\nthat you can use the ",(0,o.kt)("em",{parentName:"p"},"macro machinery")," to save yourself some typing. If you have\nenumeration of which the default value doesn't bear any parameter, you can just\ndo",(0,o.kt)("sup",{parentName:"p",id:"fnref-2-990909"},(0,o.kt)("a",{parentName:"sup",href:"#fn-2-990909",className:"footnote-ref"},"2")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Default)]\nenum Color {\n    #[default]\n    White,\n    Gray,\n    Black,\n}\n")),(0,o.kt)("h4",{id:"abusing-negation"},"Abusing negation"),(0,o.kt)("p",null,"If you want to use a ",(0,o.kt)("em",{parentName:"p"},"unary minus")," operator on your own type, you can implement\na ",(0,o.kt)("inlineCode",{parentName:"p"},"Neg")," trait",(0,o.kt)("sup",{parentName:"p",id:"fnref-3-990909"},(0,o.kt)("a",{parentName:"sup",href:"#fn-3-990909",className:"footnote-ref"},"3")),". I was dealing with a binary tree and needed a way how to look\nat the other side, so I have just implemented the negation for flipping between\nleft and right \ud83d\ude04"),(0,o.kt)("div",{className:"footnotes"},(0,o.kt)("hr",{parentName:"div"}),(0,o.kt)("ol",{parentName:"div"},(0,o.kt)("li",{parentName:"ol",id:"fn-1-990909"},(0,o.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/default/trait.Default.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Default"))," docs",(0,o.kt)("a",{parentName:"li",href:"#fnref-1-990909",className:"footnote-backref"},"\u21a9")),(0,o.kt)("li",{parentName:"ol",id:"fn-2-990909"},"Pardon my example from the graph algorithms ;)",(0,o.kt)("a",{parentName:"li",href:"#fnref-2-990909",className:"footnote-backref"},"\u21a9")),(0,o.kt)("li",{parentName:"ol",id:"fn-3-990909"},(0,o.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/ops/trait.Neg.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Neg"))," docs",(0,o.kt)("a",{parentName:"li",href:"#fnref-3-990909",className:"footnote-backref"},"\u21a9")))))}m.isMDXComponent=!0}}]);