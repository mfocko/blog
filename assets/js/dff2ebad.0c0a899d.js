"use strict";(self.webpackChunkfi=self.webpackChunkfi||[]).push([[146],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),m=p(n),u=o,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[m]="string"==typeof e?e:o,l[1]=r;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},577:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const i={title:"1st week of Advent of Code '22 in Rust",description:"Surviving first week in Rust.",date:"2022-12-15T01:15",slug:"aoc-2022/1st-week",authors:"mf",tags:["advent-of-code","advent-of-code-2022","rust"],hide_table_of_contents:!1},l=void 0,r={permalink:"/blog/aoc-2022/1st-week",editUrl:"https://gitlab.com/mfocko/blog/tree/main/blog/aoc-2022/01-week-1.md",source:"@site/blog/aoc-2022/01-week-1.md",title:"1st week of Advent of Code '22 in Rust",description:"Surviving first week in Rust.",date:"2022-12-15T01:15:00.000Z",formattedDate:"December 15, 2022",tags:[{label:"advent-of-code",permalink:"/blog/tags/advent-of-code"},{label:"advent-of-code-2022",permalink:"/blog/tags/advent-of-code-2022"},{label:"rust",permalink:"/blog/tags/rust"}],readingTime:12.4,hasTruncateMarker:!0,authors:[{name:"Matej Focko",email:"me+blog@mfocko.xyz",title:"a.k.a. @mf",url:"https://gitlab.com/mfocko",imageURL:"https://github.com/mfocko.png",key:"mf"}],frontMatter:{title:"1st week of Advent of Code '22 in Rust",description:"Surviving first week in Rust.",date:"2022-12-15T01:15",slug:"aoc-2022/1st-week",authors:"mf",tags:["advent-of-code","advent-of-code-2022","rust"],hide_table_of_contents:!1},prevItem:{title:"2nd week of Advent of Code '22 in Rust",permalink:"/blog/aoc-2022/2nd-week"},nextItem:{title:"Advent of Code '22 in Rust",permalink:"/blog/aoc-2022/intro"}},s={authorsImageUrls:[void 0]},p=[{value:"Day 1: Calorie Counting",id:"day-1-calorie-counting",level:2},{value:"Solution",id:"solution",level:3},{value:"Day 2: Rock Paper Scissors",id:"day-2-rock-paper-scissors",level:2},{value:"Solution",id:"solution-1",level:3},{value:"Day 3: Rucksack Reorganization",id:"day-3-rucksack-reorganization",level:2},{value:"Solution",id:"solution-2",level:3},{value:"Day 4: Camp Cleanup",id:"day-4-camp-cleanup",level:2},{value:"Solution",id:"solution-3",level:3},{value:"Day 5: Supply Stacks",id:"day-5-supply-stacks",level:2},{value:"Solution",id:"solution-4",level:3},{value:"Day 6: Tuning Trouble",id:"day-6-tuning-trouble",level:2},{value:"Solution",id:"solution-5",level:3},{value:"Day 7: No Space Left On Device",id:"day-7-no-space-left-on-device",level:2},{value:"Solution",id:"solution-6",level:3},{value:"Post Mortem",id:"post-mortem",level:2},{value:"<code>Rc&lt;T&gt;</code> vs <code>Rc&lt;RefCell&lt;T&gt;&gt;</code>",id:"rct-vs-rcrefcellt",level:3}],c={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Let's go through the first week of ",(0,o.kt)("a",{parentName:"p",href:"https://adventofcode.com"},(0,o.kt)("em",{parentName:"a"},"Advent of Code"))," in Rust."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If you wish to have a look at the solutions, you can follow them on my ",(0,o.kt)("a",{parentName:"p",href:"https://gitlab.com/mfocko/advent-of-code-2022"},"GitLab"),".\nMore specifically in the ",(0,o.kt)("a",{parentName:"p",href:"https://gitlab.com/mfocko/advent-of-code-2022/-/tree/main/src/bin"},(0,o.kt)("inlineCode",{parentName:"a"},"/src/bin/")),".")),(0,o.kt)("p",null,"I will try to summarize my experience with using Rust for the AoC. Trying it out\nages ago, I believe it will be ",(0,o.kt)("em",{parentName:"p"},"pain and suffering"),", but we will see. For each\nday I will also try to give a tl;dr of the problem, so that you can better imagine\nthe relation to my woes or \ud83d\udc4d moments."),(0,o.kt)("h2",{id:"day-1-calorie-counting"},(0,o.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/1"},"Day 1: Calorie Counting")),(0,o.kt)("admonition",{title:"tl;dr",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"As the name suggests, we get the calories of the food contained in the elves\nbackpacks and we want to choose the elf that has the most food ;)")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Wakey wakey!")),(0,o.kt)("p",null,"Programming in Rust at 6am definitely hits. I've also forgotten to mention how I\nhandle samples. With each puzzle you usually get a sample input and expected\noutput. You can use them to verify that your solution works, or usually doesn't."),(0,o.kt)("p",null,"At first I've decided to put asserts into my ",(0,o.kt)("inlineCode",{parentName:"p"},"main"),", something like"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'assert_eq!(part_1(&sample), 24000);\ninfo!("Part 1: {}", part_1(&input));\n\nassert_eq!(part_2(&sample), 45000);\ninfo!("Part 2: {}", part_2(&input));\n')),(0,o.kt)("p",null,"However, once you get further, the sample input may take some time to run itself.\nSo in the end, I have decided to turn them into unit tests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_part_1() {\n        let sample = parse_input("samples/day01.txt");\n        assert_eq!(part_1(&sample), 24000);\n    }\n\n    #[test]\n    fn test_part_2() {\n        let sample = parse_input("samples/day01.txt");\n        assert_eq!(part_2(&sample), 45000);\n    }\n}\n')),(0,o.kt)("p",null,"And later on I have noticed, it's hard to tell the difference between the days,\nso I further renamed the ",(0,o.kt)("inlineCode",{parentName:"p"},"mod")," from generic ",(0,o.kt)("inlineCode",{parentName:"p"},"tests")," to reflect the days."),(0,o.kt)("p",null,"Also after finishing the first day puzzle, I have installed an ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mozilla/sccache"},(0,o.kt)("inlineCode",{parentName:"a"},"sccache"))," to\ncache the builds, so that the build time is lower, cause it was kinda unbearable."),(0,o.kt)("h3",{id:"solution"},"Solution"),(0,o.kt)("p",null,"Well, it's a pretty simple problem. You just take the input, sum the calories and\nfind the biggest one. However, if we try to generalize to more than the biggest\none, the fun appears. We have few options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"keep all the calories, sort them, take what we need"),(0,o.kt)("li",{parentName:"ul"},"keep all the calories and use max heap"),(0,o.kt)("li",{parentName:"ul"},"use min heap and maintain at most N calories that we need")),(0,o.kt)("h2",{id:"day-2-rock-paper-scissors"},(0,o.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/2"},"Day 2: Rock Paper Scissors")),(0,o.kt)("admonition",{title:"tl;dr",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You want to know what score did you achieve while playing ",(0,o.kt)("em",{parentName:"p"},"Rock Paper Scissors"),".\nAnd then you want to be strategic about it.")),(0,o.kt)("p",null,"Apart from the technical details of the puzzle, it went relatively smooth."),(0,o.kt)("h3",{id:"solution-1"},"Solution"),(0,o.kt)("p",null,"I took relatively na\xefve approach and then tried to simplify it."),(0,o.kt)("h2",{id:"day-3-rucksack-reorganization"},(0,o.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/3"},"Day 3: Rucksack Reorganization")),(0,o.kt)("admonition",{title:"tl;dr",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Let's go reorganize elves' backpacks! Each backpacks has 2 compartments and you\nwant to find the common item among those compartments. Each of them has priority,\nyou care only about the sum.")),(0,o.kt)("p",null,"This is the day where I started to fight the compiler and neither of us decided\nto give up. Let's dive into it \\o/"),(0,o.kt)("admonition",{title:"Fun fact",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Fighting the compiler took me 30 minutes.")),(0,o.kt)("p",null,"We need to find a common item among 2 collections, that's an easy task, right?\nWe can construct 2 sets and find an intersection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"let top: HashSet<i32> = [1, 2, 3].iter().collect();\nlet bottom: HashSet<i32> = [3, 4, 5].iter().collect();\n")),(0,o.kt)("p",null,"Now, the first issue that we encounter is caused by the fact that we are using\na slice (the ",(0,o.kt)("inlineCode",{parentName:"p"},"[\u2026]"),"), iterator of that returns ",(0,o.kt)("strong",{parentName:"p"},"references")," to the numbers.\nAnd we get immediately yelled at by the compiler, because the numbers are discarded\nafter running the ",(0,o.kt)("inlineCode",{parentName:"p"},".collect"),". To fix this, we can use ",(0,o.kt)("inlineCode",{parentName:"p"},".into_iter"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"let top: HashSet<i32> = [1, 2, 3].into_iter().collect();\nlet bottom: HashSet<i32> = [3, 4, 5].into_iter().collect();\n")),(0,o.kt)("p",null,"This way the numbers will get copied instead of referenced. OK, let's find the\nintersection of those 2 collections:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'println!("Common elements: {:?}", top.intersection(&bottom));\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Common elements: [3]\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Notice that we need to do ",(0,o.kt)("inlineCode",{parentName:"p"},"&bottom"),". It explicitly specifies that ",(0,o.kt)("inlineCode",{parentName:"p"},".intersection"),"\n",(0,o.kt)("strong",{parentName:"p"},"borrows")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"bottom"),", i.e. takes an immutable reference to it.")),(0,o.kt)("p",null,"That's what we want, right? Looks like it! \\o/"),(0,o.kt)("p",null,"Next part wants us to find the common element among all of the backpacks. OK, so\nthat should be fairly easy, we have an intersection and we want to find intersection\nover all of them."),(0,o.kt)("p",null,"Let's have a look at the type of the ",(0,o.kt)("inlineCode",{parentName:"p"},".intersection")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn intersection<'a>(\n\xa0\xa0\xa0\xa0&'a self,\n\xa0\xa0\xa0\xa0other: &'a HashSet<T, S>\n) -> Intersection<'a, T, S>\n")),(0,o.kt)("p",null,"OK\u2026 Huh\u2026 But we have an example there!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"let intersection: HashSet<_> = a.intersection(&b).collect();\n")),(0,o.kt)("p",null,"Cool, that's all we need."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'let top: HashSet<i32> = [1, 2, 3, 4].into_iter().collect();\nlet bottom: HashSet<i32> = [3, 4, 5, 6].into_iter().collect();\nlet top_2: HashSet<i32> = [2, 3, 4, 5, 6].into_iter().collect();\nlet bottom_2: HashSet<i32> = [4, 5, 6].into_iter().collect();\n\nlet intersection: HashSet<_> = top.intersection(&bottom).collect();\nprintln!("Intersection: {:?}", intersection);\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Intersection: {3, 4}\n")),(0,o.kt)("p",null,"Cool, so let's do the intersection with the ",(0,o.kt)("inlineCode",{parentName:"p"},"top_2"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'let top: HashSet<i32> = [1, 2, 3, 4].into_iter().collect();\nlet bottom: HashSet<i32> = [3, 4, 5, 6].into_iter().collect();\nlet top_2: HashSet<i32> = [2, 3, 4, 5, 6].into_iter().collect();\nlet bottom_2: HashSet<i32> = [4, 5, 6].into_iter().collect();\n\nlet intersection: HashSet<_> = top.intersection(&bottom).collect();\nlet intersection: HashSet<_> = intersection.intersection(&top_2).collect();\nprintln!("Intersection: {:?}", intersection);\n')),(0,o.kt)("p",null,"And we get yelled at by the compiler:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"error[E0308]: mismatched types\n  --\x3e src/main.rs:10:58\n   |\n10 | let intersection: HashSet<_> = intersection.intersection(&top_2).collect();\n   |                                             ------------ ^^^^^^ expected `&i32`, found `i32`\n   |                                             |\n   |                                             arguments to this function are incorrect\n   |\n   = note: expected reference `&HashSet<&i32>`\n              found reference `&HashSet<i32>`\n")),(0,o.kt)("p",null,"/o\\ What the hell is going on here? Well, the funny thing is, that this operation\ndoesn't return the elements themselves, but the references to them and when we pass\nthe third set, it has just the values themselves, without any references."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"It may seem as a very weird decision, but in fact it makes some sense\u2026 It allows\nyou to do intersection of items that may not be possible to copy. Overall this is\na \u201ctax\u201d for having a borrow checker ",(0,o.kt)("del",{parentName:"p"},"drilling your ass")," having your back and\nmaking sure you're not doing something naughty that may cause an ",(0,o.kt)("strong",{parentName:"p"},"undefined"),"\n",(0,o.kt)("strong",{parentName:"p"},"behavior"),".")),(0,o.kt)("p",null,"To resolve this we need to get an iterator that ",(0,o.kt)("strong",{parentName:"p"},"clones")," the elements:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'let top: HashSet<i32> = [1, 2, 3, 4].into_iter().collect();\nlet bottom: HashSet<i32> = [3, 4, 5, 6].into_iter().collect();\nlet top_2: HashSet<i32> = [2, 3, 4, 5, 6].into_iter().collect();\nlet bottom_2: HashSet<i32> = [4, 5, 6].into_iter().collect();\n\nlet intersection: HashSet<_> = top.intersection(&bottom).cloned().collect();\nlet intersection: HashSet<_> = intersection.intersection(&top_2).cloned().collect();\nlet intersection: HashSet<_> = intersection.intersection(&bottom_2).cloned().collect();\nprintln!("Intersection: {:?}", intersection);\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Intersection: {4}\n")),(0,o.kt)("h3",{id:"solution-2"},"Solution"),(0,o.kt)("p",null,"The approach is pretty simple, if you omit the ",(0,o.kt)("em",{parentName:"p"},"1on1 with the compiler"),". You just\nhave some fun with the set operations :)"),(0,o.kt)("h2",{id:"day-4-camp-cleanup"},(0,o.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/4"},"Day 4: Camp Cleanup")),(0,o.kt)("admonition",{title:"tl;dr",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Elves are cleaning up the camp and they got overlapping sections to clean up.\nFind how many overlap and can take the day off.")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html"},(0,o.kt)("inlineCode",{parentName:"a"},"RangeInclusive"))," is your friend not an enemy :)"),(0,o.kt)("h3",{id:"solution-3"},"Solution"),(0,o.kt)("p",null,"Relatively easy, you just need to parse the input and know what you want. Rust's\n",(0,o.kt)("inlineCode",{parentName:"p"},"RangeInclusive")," type helped a lot, cause it took care of all abstractions."),(0,o.kt)("h2",{id:"day-5-supply-stacks"},(0,o.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/5"},"Day 5: Supply Stacks")),(0,o.kt)("admonition",{title:"tl;dr",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Let's play with stacks of crates.")),(0,o.kt)("p",null,"Very easy problem with very annoying input. You can judge yourself:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [D]    \n[N] [C]    \n[Z] [M] [P]\n 1   2   3 \n\nmove 1 from 2 to 1\nmove 3 from 1 to 3\nmove 2 from 2 to 1\nmove 1 from 1 to 2\n")),(0,o.kt)("p",null,"Good luck transforming that into something reasonable :)"),(0,o.kt)("admonition",{title:"Fun fact",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Took me 40 minutes to parse this reasonably, including fighting the compiler.")),(0,o.kt)("h3",{id:"solution-4"},"Solution"),(0,o.kt)("p",null,"For the initial solution I went with a manual solution (as in ",(0,o.kt)("em",{parentName:"p"},"I have done all"),"\n",(0,o.kt)("em",{parentName:"p"},"the work"),". Later on I have decided to explore the ",(0,o.kt)("inlineCode",{parentName:"p"},"std")," and interface of the\n",(0,o.kt)("inlineCode",{parentName:"p"},"std::vec::Vec")," and found ",(0,o.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.split_off"},(0,o.kt)("inlineCode",{parentName:"a"},"split_off"))," which takes an index and splits (duh)\nthe vector:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"let mut vec = vec![1, 2, 3];\nlet vec2 = vec.split_off(1);\nassert_eq!(vec, [1]);\nassert_eq!(vec2, [2, 3]);\n")),(0,o.kt)("p",null,"This helped me simplify my solution a lot and also get rid of some ",(0,o.kt)("em",{parentName:"p"},"edge cases"),"."),(0,o.kt)("h2",{id:"day-6-tuning-trouble"},(0,o.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/6"},"Day 6: Tuning Trouble")),(0,o.kt)("admonition",{title:"tl;dr",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Finding start of the message in a very weird protocol. Start of the message is\ndenoted by ",(0,o.kt)("span",{parentName:"p",className:"math math-inline"},(0,o.kt)("span",{parentName:"span",className:"katex"},(0,o.kt)("span",{parentName:"span",className:"katex-mathml"},(0,o.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,o.kt)("semantics",{parentName:"math"},(0,o.kt)("mrow",{parentName:"semantics"},(0,o.kt)("mi",{parentName:"mrow"},"N")),(0,o.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"N")))),(0,o.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,o.kt)("span",{parentName:"span",className:"base"},(0,o.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,o.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N")))))," unique consecutive characters.")),(0,o.kt)("h3",{id:"solution-5"},"Solution"),(0,o.kt)("p",null,"A lot of different approaches, knowing that we are dealing with input consisting\nsolely of ASCII letters, I bit the bullet and went with sliding window and\nconstructing sets from that window, checking if the set is as big as the window."),(0,o.kt)("p",null,"One possible optimization could consist of keeping a bit-vector (i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"usize"),"\nvariable) of encountered characters and updating it as we go. However this has\na different issue and that is removal of the characters from the left side of the\nwindow. We don't know if the same character is not included later on."),(0,o.kt)("p",null,"Other option is to do similar thing, but keeping the frequencies of the letters,\nand again knowing we have only ASCII letters we can optimize by having a vector\nof 26 elements that keeps count for each lowercase letter."),(0,o.kt)("h2",{id:"day-7-no-space-left-on-device"},(0,o.kt)("a",{parentName:"h2",href:"https://adventofcode.com/2022/day/7"},"Day 7: No Space Left On Device")),(0,o.kt)("admonition",{title:"tl;dr",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Let's simulate ",(0,o.kt)("a",{parentName:"p",href:"https://www.man7.org/linux/man-pages/man1/du.1.html"},(0,o.kt)("inlineCode",{parentName:"a"},"du"))," to get some stats about our file system and then pinpoint\ndirectories that take a lot of space and should be deleted.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"I was waiting for this moment, and yet it got me!\n",(0,o.kt)("em",{parentName:"p"},"imagine me swearing for hours"))),(0,o.kt)("h3",{id:"solution-6"},"Solution"),(0,o.kt)("p",null,"We need to \u201c",(0,o.kt)("em",{parentName:"p"},"build"),"\u201d a file system from the input that is given in a following form:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ cd /\n$ ls\ndir a\n14848514 b.txt\n8504156 c.dat\ndir d\n$ cd a\n$ ls\ndir e\n29116 f\n2557 g\n62596 h.lst\n$ cd e\n$ ls\n584 i\n$ cd ..\n$ cd ..\n$ cd d\n$ ls\n4060174 j\n8033020 d.log\n5626152 d.ext\n7214296 k\n")),(0,o.kt)("p",null,"There are few ways in which you can achieve this and also you can assume some\npreconditions, but why would we do that, right? :)"),(0,o.kt)("p",null,"You can \u201cslap\u201d this in either ",(0,o.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/collections/struct.HashMap.html"},(0,o.kt)("inlineCode",{parentName:"a"},"HashMap"))," or ",(0,o.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/collections/struct.BTreeMap.html"},(0,o.kt)("inlineCode",{parentName:"a"},"BTreeMap"))," and call it a day.\nAnd that would be boring\u2026"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"BTreeMap")," is quite fitting for this, don't you think?")),(0,o.kt)("p",null,"I always wanted to try allocation on heap in Rust, so I chose to implement a tree.\nI fought with the ",(0,o.kt)("inlineCode",{parentName:"p"},"Box<T>")," for some time and was losing\u2026"),(0,o.kt)("p",null,"Then I looked up some implementations of trees or linked lists and decided to try\n",(0,o.kt)("inlineCode",{parentName:"p"},"Rc<Cell<T>>"),". And I got my ",(0,o.kt)("em",{parentName:"p"},"ass whopped")," by the compiler once again. /o\\"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"Box<T>")," represents a dynamically allocated memory on heap. It is a single pointer,\nyou can imagine this as ",(0,o.kt)("inlineCode",{parentName:"p"},"std::unique_ptr<T>")," in C++."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"Rc<T>")," represents a dynamically allocated memory on heap. On top of that it is\n",(0,o.kt)("em",{parentName:"p"},"reference counted")," (that's what the ",(0,o.kt)("inlineCode",{parentName:"p"},"Rc")," stands for). You can imagine this as\n",(0,o.kt)("inlineCode",{parentName:"p"},"std::shared_ptr<T>")," in C++."),(0,o.kt)("p",{parentName:"admonition"},"Now the fun stuff. Neither of them lets you ",(0,o.kt)("strong",{parentName:"p"},"mutate")," the contents of the memory."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"Cell<T>")," allows you to mutate the memory. Can be used reasonably with types that\ncan be copied, because the memory safety is guaranteed by copying the contents\nwhen there is more than one ",(0,o.kt)("strong",{parentName:"p"},"mutable")," reference to the memory."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"RefCell<T>")," is similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Cell<T>"),", but the borrowing rules (how many mutable\nreferences are present) are checked dynamically."),(0,o.kt)("p",{parentName:"admonition"},"So in the end, if you want something like ",(0,o.kt)("inlineCode",{parentName:"p"},"std::shared_ptr<T>")," in Rust, you want\nto have ",(0,o.kt)("inlineCode",{parentName:"p"},"Rc<RefCell<T>>"),".")),(0,o.kt)("p",null,"So, how are we going to represent the file system then? We will use an enumeration,\nhehe, which is an algebraic data type that can store some stuff in itself \ud83d\ude29"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"type FileHandle = Rc<RefCell<AocFile>>;\n\n#[derive(Debug)]\nenum AocFile {\n    File(usize),\n    Directory(BTreeMap<String, FileHandle>),\n}\n")),(0,o.kt)("p",null,"Let's go over it! ",(0,o.kt)("inlineCode",{parentName:"p"},"FileHandle")," represents dynamically allocated ",(0,o.kt)("inlineCode",{parentName:"p"},"AocFile"),", not\nmuch to discuss. What does the ",(0,o.kt)("inlineCode",{parentName:"p"},"#[derive(Debug)]")," do though? It lets us to print\nout the value of that enumeration, it's derived, so it's not as good as if we had\nimplemented it ourselves, but it's good enough for debugging, hence the name."),(0,o.kt)("p",null,"Now to the fun part! ",(0,o.kt)("inlineCode",{parentName:"p"},"AocFile")," value can be represented in two ways:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"File(usize)"),", e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"AocFile::File(123)")," and we can pattern match it, if we\nneed to"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Directory(BTreeMap<String, FileHandle>)")," will represent the directory and will\ncontain map matching the name of the files (or directories) within to their\nrespective file handles")),(0,o.kt)("p",null,"I will omit the details about constructing this file system, cause there are a lot\nof technicalities introduced by the nature of the input. However if you are\ninterested, you can have a look at my solution."),(0,o.kt)("p",null,"We need to find small enough directories and also find the smallest directory that\nwill free enough space. Now the question is, how could we do that. And there are\nmultiple ways I will describe."),(0,o.kt)("p",null,"I have chosen to implement ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Catamorphism#Tree_fold"},(0,o.kt)("em",{parentName:"a"},"tree catamorphism"))," \ud83d\ude29. It is basically a fold\nover a tree data structure. We descent down into the leaves and propagate computed\nresults all the way to the root. You can also notice that this approach is very\nsimilar to ",(0,o.kt)("em",{parentName:"p"},"dynamic programming"),", we find overlapping sections of the computation\nand try to minimize the additional work (in this case: we need to know sizes of\nour descendants, but we have already been there)."),(0,o.kt)("p",null,"Another approach that has been suggested to me few days later is running DFS on\nthe graph. And, funnily enough, we would still need to combine what we found in\nthe branches where we descent. So in the end, it would work very similarly to my\nsolution."),(0,o.kt)("p",null,"One of the more exotic options would be precomputing the required information at\nthe same time as parsing. That could be done by adding additional fields to the\nnodes which would allow storing such information and updating it as we construct\nthe file system."),(0,o.kt)("h2",{id:"post-mortem"},"Post Mortem"),(0,o.kt)("p",null,"Things that have been brought up in the discussion later on."),(0,o.kt)("h3",{id:"rct-vs-rcrefcellt"},(0,o.kt)("inlineCode",{parentName:"h3"},"Rc<T>")," vs ",(0,o.kt)("inlineCode",{parentName:"h3"},"Rc<RefCell<T>>")),(0,o.kt)("p",null,"It has been brought up that I have a contradicting statement regarding the\ndynamically allocated memory. Specifically:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You can imagine ",(0,o.kt)("inlineCode",{parentName:"li"},"Rc<T>")," as an ",(0,o.kt)("inlineCode",{parentName:"li"},"std::shared_ptr<T>")," (in C++)"),(0,o.kt)("li",{parentName:"ul"},"When you want an equivalent of ",(0,o.kt)("inlineCode",{parentName:"li"},"std::shared_ptr<T>"),", you want to use\n",(0,o.kt)("inlineCode",{parentName:"li"},"Rc<RefCell<T>>"))),(0,o.kt)("p",null,"Now, in Rust it is a bit more complicated, because the type that represents the\n\u201cshared pointer\u201d is ",(0,o.kt)("inlineCode",{parentName:"p"},"Rc<T>"),". What ",(0,o.kt)("inlineCode",{parentName:"p"},"RefCell<T>")," does is making sure that there is\nonly one \u201cowner\u201d of a mutable reference at a time (and dynamically, as opposed\nto the ",(0,o.kt)("inlineCode",{parentName:"p"},"Cell<T>"),")."),(0,o.kt)("p",null,"Therefore to be precise and correct about the equivalents of ",(0,o.kt)("inlineCode",{parentName:"p"},"std::shared_ptr<T>"),"\nin Rust, we can say that"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Rc<T>")," is an equivalent of a ",(0,o.kt)("inlineCode",{parentName:"li"},"const std::shared_ptr<T>"),","),(0,o.kt)("li",{parentName:"ul"},"and ",(0,o.kt)("inlineCode",{parentName:"li"},"Rc<RefCell<T>>")," is an equivalent of a ",(0,o.kt)("inlineCode",{parentName:"li"},"std::shared_ptr<T>"),".")),(0,o.kt)("p",null,"You can easily see that they only differ in the mutability. (And even that is not\nas simple as it seems, because there is also ",(0,o.kt)("inlineCode",{parentName:"p"},"Cell<T>"),")"))}d.isMDXComponent=!0}}]);