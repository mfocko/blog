"use strict";(self.webpackChunkfi=self.webpackChunkfi||[]).push([[8262],{88445:t=>{t.exports=JSON.parse('{"tag":{"label":"python","permalink":"/algorithms/tags/python","allTagsPath":"/algorithms/tags","count":7,"items":[{"id":"hash-tables/2023-11-28-breaking/breaking","title":"Breaking hash table","description":"How to get the linear time complexity in a hash table.\\n","permalink":"/algorithms/hash-tables/breaking"},{"id":"hash-tables/2023-11-28-breaking/python","title":"Breaking Python","description":"Actually getting the worst-case time complexity in Python.\\n","permalink":"/algorithms/hash-tables/breaking/python"},{"id":"hash-tables/2023-11-28-breaking/mitigations","title":"Possible Mitigations","description":"Talking about the ways how to prevent the attacks on the hash table.\\n","permalink":"/algorithms/hash-tables/breaking/mitigations"},{"id":"recursion/2022-11-29-karel/karel","title":"Recursion and backtracking with Robot Karel","description":"A problem with too many restrictions.\\n","permalink":"/algorithms/recursion/karel"},{"id":"recursion/2022-11-29-karel/solution","title":"Solution to the problem","description":"Solving the problem introduced in the previous post.\\n","permalink":"/algorithms/recursion/karel/solution"},{"id":"time-complexity/extend","title":"Time complexity of \u2039extend\u203a","description":"How to make inefficient algorithm unknowingly.\\n","permalink":"/algorithms/time-complexity/extend"},{"id":"algorithms-correctness/postcondition-ambiguity","title":"Vague postconditions and proving correctness of algorithms","description":"Debugging and testing with precise postconditions.\\n","permalink":"/algorithms/algorithms-correctness/postcondition-ambiguity"}],"unlisted":false}}')}}]);